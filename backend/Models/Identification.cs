/* 
 * Получение публичной информации о банковских продуктах
 *
 * Содержит описываются API для Открытых банковских интерфейсов для получения публичной информации о банковских продуктах.
 *
 * OpenAPI spec version: 1.3.1
 * Contact: info@fintechru.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Идентификация юридического или физического лица
    /// </summary>
    [DataContract]
        public partial class Identification :  IEquatable<Identification>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Identification" /> class.
        /// </summary>
        /// <param name="schemeName">schemeName (required).</param>
        /// <param name="identification">Уникальный и однозначный идентификатор участника, присвоенный идентифицирующей организацией. (required).</param>
        public Identification(PartyIdentificationCode schemeName = default(PartyIdentificationCode), string identification = default(string))
        {
            // to ensure "schemeName" is required (not null)
            if (schemeName == null)
            {
                throw new InvalidDataException("schemeName is a required property for Identification and cannot be null");
            }
            else
            {
                this.SchemeName = schemeName;
            }
            // to ensure "identification" is required (not null)
            if (identification == null)
            {
                throw new InvalidDataException("identification is a required property for Identification and cannot be null");
            }
            else
            {
                this._Identification = identification;
            }
        }
        
        /// <summary>
        /// Gets or Sets SchemeName
        /// </summary>
        [DataMember(Name="schemeName", EmitDefaultValue=false)]
        public PartyIdentificationCode SchemeName { get; set; }

        /// <summary>
        /// Уникальный и однозначный идентификатор участника, присвоенный идентифицирующей организацией.
        /// </summary>
        /// <value>Уникальный и однозначный идентификатор участника, присвоенный идентифицирующей организацией.</value>
        [DataMember(Name="identification", EmitDefaultValue=false)]
        public string _Identification { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Identification {\n");
            sb.Append("  SchemeName: ").Append(SchemeName).Append("\n");
            sb.Append("  _Identification: ").Append(_Identification).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Identification);
        }

        /// <summary>
        /// Returns true if Identification instances are equal
        /// </summary>
        /// <param name="input">Instance of Identification to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Identification input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SchemeName == input.SchemeName ||
                    (this.SchemeName != null &&
                    this.SchemeName.Equals(input.SchemeName))
                ) && 
                (
                    this._Identification == input._Identification ||
                    (this._Identification != null &&
                    this._Identification.Equals(input._Identification))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SchemeName != null)
                    hashCode = hashCode * 59 + this.SchemeName.GetHashCode();
                if (this._Identification != null)
                    hashCode = hashCode * 59 + this._Identification.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
