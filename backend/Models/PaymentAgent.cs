/* 
 * Получение публичной информации о банковских продуктах
 *
 * Содержит описываются API для Открытых банковских интерфейсов для получения публичной информации о банковских продуктах.
 *
 * OpenAPI spec version: 1.3.1
 * Contact: info@fintechru.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Информация о банковском платежном агенте (субагенте)
    /// </summary>
    [DataContract]
        public partial class PaymentAgent :  IEquatable<PaymentAgent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentAgent" /> class.
        /// </summary>
        /// <param name="paymentAgentIndicator">paymentAgentIndicator.</param>
        /// <param name="name">Наименование банковского платежного агента (субагента) в соответствии с ЕГРЮЛ или фамилия, имя, отчество (при наличии) банковского платежного агента (субагента) в соответствии с ЕГРИП.</param>
        /// <param name="identification">Идентификация юридического или физического лица..</param>
        public PaymentAgent(PaymentAgentIndicatorCode paymentAgentIndicator = default(PaymentAgentIndicatorCode), string name = default(string), List<Identification> identification = default(List<Identification>))
        {
            this.PaymentAgentIndicator = paymentAgentIndicator;
            this.Name = name;
            this.Identification = identification;
        }
        
        /// <summary>
        /// Gets or Sets PaymentAgentIndicator
        /// </summary>
        [DataMember(Name="paymentAgentIndicator", EmitDefaultValue=false)]
        public PaymentAgentIndicatorCode PaymentAgentIndicator { get; set; }

        /// <summary>
        /// Наименование банковского платежного агента (субагента) в соответствии с ЕГРЮЛ или фамилия, имя, отчество (при наличии) банковского платежного агента (субагента) в соответствии с ЕГРИП
        /// </summary>
        /// <value>Наименование банковского платежного агента (субагента) в соответствии с ЕГРЮЛ или фамилия, имя, отчество (при наличии) банковского платежного агента (субагента) в соответствии с ЕГРИП</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Идентификация юридического или физического лица.
        /// </summary>
        /// <value>Идентификация юридического или физического лица.</value>
        [DataMember(Name="Identification", EmitDefaultValue=false)]
        public List<Identification> Identification { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentAgent {\n");
            sb.Append("  PaymentAgentIndicator: ").Append(PaymentAgentIndicator).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Identification: ").Append(Identification).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentAgent);
        }

        /// <summary>
        /// Returns true if PaymentAgent instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentAgent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentAgent input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PaymentAgentIndicator == input.PaymentAgentIndicator ||
                    (this.PaymentAgentIndicator != null &&
                    this.PaymentAgentIndicator.Equals(input.PaymentAgentIndicator))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Identification == input.Identification ||
                    this.Identification != null &&
                    input.Identification != null &&
                    this.Identification.SequenceEqual(input.Identification)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PaymentAgentIndicator != null)
                    hashCode = hashCode * 59 + this.PaymentAgentIndicator.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Identification != null)
                    hashCode = hashCode * 59 + this.Identification.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
