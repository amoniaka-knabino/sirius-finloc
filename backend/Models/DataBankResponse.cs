/* 
 * Получение публичной информации о банковских продуктах
 *
 * Содержит описываются API для Открытых банковских интерфейсов для получения публичной информации о банковских продуктах.
 *
 * OpenAPI spec version: 1.3.1
 * Contact: info@fintechru.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Раздел данных ответа информации о кредитных организациях
    /// </summary>
    [DataContract]
        public partial class DataBankResponse :  IEquatable<DataBankResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DataBankResponse" /> class.
        /// </summary>
        /// <param name="bank">Комплексный объект кредитной организации.</param>
        public DataBankResponse(List<Bank> bank = default(List<Bank>))
        {
            this.Bank = bank;
        }
        
        /// <summary>
        /// Комплексный объект кредитной организации
        /// </summary>
        /// <value>Комплексный объект кредитной организации</value>
        [DataMember(Name="Bank", EmitDefaultValue=false)]
        public List<Bank> Bank { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DataBankResponse {\n");
            sb.Append("  Bank: ").Append(Bank).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DataBankResponse);
        }

        /// <summary>
        /// Returns true if DataBankResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of DataBankResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DataBankResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Bank == input.Bank ||
                    this.Bank != null &&
                    input.Bank != null &&
                    this.Bank.SequenceEqual(input.Bank)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Bank != null)
                    hashCode = hashCode * 59 + this.Bank.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
