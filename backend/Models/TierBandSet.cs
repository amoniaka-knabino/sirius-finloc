/* 
 * Получение публичной информации о банковских продуктах
 *
 * Содержит описываются API для Открытых банковских интерфейсов для получения публичной информации о банковских продуктах.
 *
 * OpenAPI spec version: 1.3.1
 * Contact: info@fintechru.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Группа описания начисления процентов
    /// </summary>
    [DataContract]
        public partial class TierBandSet :  IEquatable<TierBandSet>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TierBandSet" /> class.
        /// </summary>
        /// <param name="tierBandMethod">tierBandMethod (required).</param>
        /// <param name="calculationMethod">calculationMethod.</param>
        /// <param name="otherCalculationMethod">otherCalculationMethod.</param>
        /// <param name="destination">destination (required).</param>
        /// <param name="comments">comments.</param>
        /// <param name="tierBandSetEligibility">Ограничения на группу начисления процентов.</param>
        /// <param name="tierBand">Подробная информация об уровнях процентной ставки (required).</param>
        public TierBandSet(TierBandMethod tierBandMethod = default(TierBandMethod), InterestCalculationMethod calculationMethod = default(InterestCalculationMethod), OtherTypeCode otherCalculationMethod = default(OtherTypeCode), TierBandMethodDestination destination = default(TierBandMethodDestination), Comments comments = default(Comments), List<Eligibility> tierBandSetEligibility = default(List<Eligibility>), List<TierBand> tierBand = default(List<TierBand>))
        {
            // to ensure "tierBandMethod" is required (not null)
            if (tierBandMethod == null)
            {
                throw new InvalidDataException("tierBandMethod is a required property for TierBandSet and cannot be null");
            }
            else
            {
                this.TierBandMethod = tierBandMethod;
            }
            // to ensure "destination" is required (not null)
            if (destination == null)
            {
                throw new InvalidDataException("destination is a required property for TierBandSet and cannot be null");
            }
            else
            {
                this.Destination = destination;
            }
            // to ensure "tierBand" is required (not null)
            if (tierBand == null)
            {
                throw new InvalidDataException("tierBand is a required property for TierBandSet and cannot be null");
            }
            else
            {
                this.TierBand = tierBand;
            }
            this.CalculationMethod = calculationMethod;
            this.OtherCalculationMethod = otherCalculationMethod;
            this.Comments = comments;
            this.TierBandSetEligibility = tierBandSetEligibility;
        }
        
        /// <summary>
        /// Gets or Sets TierBandMethod
        /// </summary>
        [DataMember(Name="tierBandMethod", EmitDefaultValue=false)]
        public TierBandMethod TierBandMethod { get; set; }

        /// <summary>
        /// Gets or Sets CalculationMethod
        /// </summary>
        [DataMember(Name="calculationMethod", EmitDefaultValue=false)]
        public InterestCalculationMethod CalculationMethod { get; set; }

        /// <summary>
        /// Gets or Sets OtherCalculationMethod
        /// </summary>
        [DataMember(Name="OtherCalculationMethod", EmitDefaultValue=false)]
        public OtherTypeCode OtherCalculationMethod { get; set; }

        /// <summary>
        /// Gets or Sets Destination
        /// </summary>
        [DataMember(Name="destination", EmitDefaultValue=false)]
        public TierBandMethodDestination Destination { get; set; }

        /// <summary>
        /// Gets or Sets Comments
        /// </summary>
        [DataMember(Name="comments", EmitDefaultValue=false)]
        public Comments Comments { get; set; }

        /// <summary>
        /// Ограничения на группу начисления процентов
        /// </summary>
        /// <value>Ограничения на группу начисления процентов</value>
        [DataMember(Name="TierBandSetEligibility", EmitDefaultValue=false)]
        public List<Eligibility> TierBandSetEligibility { get; set; }

        /// <summary>
        /// Подробная информация об уровнях процентной ставки
        /// </summary>
        /// <value>Подробная информация об уровнях процентной ставки</value>
        [DataMember(Name="TierBand", EmitDefaultValue=false)]
        public List<TierBand> TierBand { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TierBandSet {\n");
            sb.Append("  TierBandMethod: ").Append(TierBandMethod).Append("\n");
            sb.Append("  CalculationMethod: ").Append(CalculationMethod).Append("\n");
            sb.Append("  OtherCalculationMethod: ").Append(OtherCalculationMethod).Append("\n");
            sb.Append("  Destination: ").Append(Destination).Append("\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("  TierBandSetEligibility: ").Append(TierBandSetEligibility).Append("\n");
            sb.Append("  TierBand: ").Append(TierBand).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TierBandSet);
        }

        /// <summary>
        /// Returns true if TierBandSet instances are equal
        /// </summary>
        /// <param name="input">Instance of TierBandSet to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TierBandSet input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TierBandMethod == input.TierBandMethod ||
                    (this.TierBandMethod != null &&
                    this.TierBandMethod.Equals(input.TierBandMethod))
                ) && 
                (
                    this.CalculationMethod == input.CalculationMethod ||
                    (this.CalculationMethod != null &&
                    this.CalculationMethod.Equals(input.CalculationMethod))
                ) && 
                (
                    this.OtherCalculationMethod == input.OtherCalculationMethod ||
                    (this.OtherCalculationMethod != null &&
                    this.OtherCalculationMethod.Equals(input.OtherCalculationMethod))
                ) && 
                (
                    this.Destination == input.Destination ||
                    (this.Destination != null &&
                    this.Destination.Equals(input.Destination))
                ) && 
                (
                    this.Comments == input.Comments ||
                    (this.Comments != null &&
                    this.Comments.Equals(input.Comments))
                ) && 
                (
                    this.TierBandSetEligibility == input.TierBandSetEligibility ||
                    this.TierBandSetEligibility != null &&
                    input.TierBandSetEligibility != null &&
                    this.TierBandSetEligibility.SequenceEqual(input.TierBandSetEligibility)
                ) && 
                (
                    this.TierBand == input.TierBand ||
                    this.TierBand != null &&
                    input.TierBand != null &&
                    this.TierBand.SequenceEqual(input.TierBand)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TierBandMethod != null)
                    hashCode = hashCode * 59 + this.TierBandMethod.GetHashCode();
                if (this.CalculationMethod != null)
                    hashCode = hashCode * 59 + this.CalculationMethod.GetHashCode();
                if (this.OtherCalculationMethod != null)
                    hashCode = hashCode * 59 + this.OtherCalculationMethod.GetHashCode();
                if (this.Destination != null)
                    hashCode = hashCode * 59 + this.Destination.GetHashCode();
                if (this.Comments != null)
                    hashCode = hashCode * 59 + this.Comments.GetHashCode();
                if (this.TierBandSetEligibility != null)
                    hashCode = hashCode * 59 + this.TierBandSetEligibility.GetHashCode();
                if (this.TierBand != null)
                    hashCode = hashCode * 59 + this.TierBand.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
