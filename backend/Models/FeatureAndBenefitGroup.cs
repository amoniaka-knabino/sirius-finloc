/* 
 * Получение публичной информации о банковских продуктах
 *
 * Содержит описываются API для Открытых банковских интерфейсов для получения публичной информации о банковских продуктах.
 *
 * OpenAPI spec version: 1.3.1
 * Contact: info@fintechru.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Группа элементов, описывающих программы и преимущества
    /// </summary>
    [DataContract]
        public partial class FeatureAndBenefitGroup :  IEquatable<FeatureAndBenefitGroup>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FeatureAndBenefitGroup" /> class.
        /// </summary>
        /// <param name="name">Наименование группы программам и преимуществ (required).</param>
        /// <param name="type">Общепринятые типы программам и преимуществ в виде кода (справочные значения определяются ППД и публикуются на его портале).</param>
        /// <param name="comments">comments.</param>
        /// <param name="benefitGroupNominalValue">benefitGroupNominalValue.</param>
        /// <param name="fee">fee.</param>
        /// <param name="applicationFrequency">applicationFrequency.</param>
        /// <param name="otherApplicationFrequency">otherApplicationFrequency.</param>
        /// <param name="calculationFrequency">calculationFrequency.</param>
        /// <param name="otherCalculationFrequency">otherCalculationFrequency.</param>
        /// <param name="otherType">otherType.</param>
        /// <param name="featureAndBenefitItem">Характеристики, связанные с программами и преимуществами.</param>
        /// <param name="featureBenefitEligibility">Ограничение на участие в программе и преимуществах.</param>
        public FeatureAndBenefitGroup(string name = default(string), string type = default(string), Comments comments = default(Comments), string benefitGroupNominalValue = default(string), string fee = default(string), FrequencyType applicationFrequency = default(FrequencyType), OtherTypeCode otherApplicationFrequency = default(OtherTypeCode), FrequencyType calculationFrequency = default(FrequencyType), OtherTypeCode otherCalculationFrequency = default(OtherTypeCode), OtherTypeCode otherType = default(OtherTypeCode), List<FeatureAndBenefitItem> featureAndBenefitItem = default(List<FeatureAndBenefitItem>), List<Eligibility> featureBenefitEligibility = default(List<Eligibility>))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for FeatureAndBenefitGroup and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            this.Type = type;
            this.Comments = comments;
            this.BenefitGroupNominalValue = benefitGroupNominalValue;
            this.Fee = fee;
            this.ApplicationFrequency = applicationFrequency;
            this.OtherApplicationFrequency = otherApplicationFrequency;
            this.CalculationFrequency = calculationFrequency;
            this.OtherCalculationFrequency = otherCalculationFrequency;
            this.OtherType = otherType;
            this.FeatureAndBenefitItem = featureAndBenefitItem;
            this.FeatureBenefitEligibility = featureBenefitEligibility;
        }
        
        /// <summary>
        /// Наименование группы программам и преимуществ
        /// </summary>
        /// <value>Наименование группы программам и преимуществ</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Общепринятые типы программам и преимуществ в виде кода (справочные значения определяются ППД и публикуются на его портале)
        /// </summary>
        /// <value>Общепринятые типы программам и преимуществ в виде кода (справочные значения определяются ППД и публикуются на его портале)</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Comments
        /// </summary>
        [DataMember(Name="comments", EmitDefaultValue=false)]
        public Comments Comments { get; set; }

        /// <summary>
        /// Gets or Sets BenefitGroupNominalValue
        /// </summary>
        [DataMember(Name="BenefitGroupNominalValue", EmitDefaultValue=false)]
        public string BenefitGroupNominalValue { get; set; }

        /// <summary>
        /// Gets or Sets Fee
        /// </summary>
        [DataMember(Name="fee", EmitDefaultValue=false)]
        public string Fee { get; set; }

        /// <summary>
        /// Gets or Sets ApplicationFrequency
        /// </summary>
        [DataMember(Name="applicationFrequency", EmitDefaultValue=false)]
        public FrequencyType ApplicationFrequency { get; set; }

        /// <summary>
        /// Gets or Sets OtherApplicationFrequency
        /// </summary>
        [DataMember(Name="OtherApplicationFrequency", EmitDefaultValue=false)]
        public OtherTypeCode OtherApplicationFrequency { get; set; }

        /// <summary>
        /// Gets or Sets CalculationFrequency
        /// </summary>
        [DataMember(Name="calculationFrequency", EmitDefaultValue=false)]
        public FrequencyType CalculationFrequency { get; set; }

        /// <summary>
        /// Gets or Sets OtherCalculationFrequency
        /// </summary>
        [DataMember(Name="OtherCalculationFrequency", EmitDefaultValue=false)]
        public OtherTypeCode OtherCalculationFrequency { get; set; }

        /// <summary>
        /// Gets or Sets OtherType
        /// </summary>
        [DataMember(Name="OtherType", EmitDefaultValue=false)]
        public OtherTypeCode OtherType { get; set; }

        /// <summary>
        /// Характеристики, связанные с программами и преимуществами
        /// </summary>
        /// <value>Характеристики, связанные с программами и преимуществами</value>
        [DataMember(Name="FeatureAndBenefitItem", EmitDefaultValue=false)]
        public List<FeatureAndBenefitItem> FeatureAndBenefitItem { get; set; }

        /// <summary>
        /// Ограничение на участие в программе и преимуществах
        /// </summary>
        /// <value>Ограничение на участие в программе и преимуществах</value>
        [DataMember(Name="FeatureBenefitEligibility", EmitDefaultValue=false)]
        public List<Eligibility> FeatureBenefitEligibility { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FeatureAndBenefitGroup {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("  BenefitGroupNominalValue: ").Append(BenefitGroupNominalValue).Append("\n");
            sb.Append("  Fee: ").Append(Fee).Append("\n");
            sb.Append("  ApplicationFrequency: ").Append(ApplicationFrequency).Append("\n");
            sb.Append("  OtherApplicationFrequency: ").Append(OtherApplicationFrequency).Append("\n");
            sb.Append("  CalculationFrequency: ").Append(CalculationFrequency).Append("\n");
            sb.Append("  OtherCalculationFrequency: ").Append(OtherCalculationFrequency).Append("\n");
            sb.Append("  OtherType: ").Append(OtherType).Append("\n");
            sb.Append("  FeatureAndBenefitItem: ").Append(FeatureAndBenefitItem).Append("\n");
            sb.Append("  FeatureBenefitEligibility: ").Append(FeatureBenefitEligibility).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FeatureAndBenefitGroup);
        }

        /// <summary>
        /// Returns true if FeatureAndBenefitGroup instances are equal
        /// </summary>
        /// <param name="input">Instance of FeatureAndBenefitGroup to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FeatureAndBenefitGroup input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Comments == input.Comments ||
                    (this.Comments != null &&
                    this.Comments.Equals(input.Comments))
                ) && 
                (
                    this.BenefitGroupNominalValue == input.BenefitGroupNominalValue ||
                    (this.BenefitGroupNominalValue != null &&
                    this.BenefitGroupNominalValue.Equals(input.BenefitGroupNominalValue))
                ) && 
                (
                    this.Fee == input.Fee ||
                    (this.Fee != null &&
                    this.Fee.Equals(input.Fee))
                ) && 
                (
                    this.ApplicationFrequency == input.ApplicationFrequency ||
                    (this.ApplicationFrequency != null &&
                    this.ApplicationFrequency.Equals(input.ApplicationFrequency))
                ) && 
                (
                    this.OtherApplicationFrequency == input.OtherApplicationFrequency ||
                    (this.OtherApplicationFrequency != null &&
                    this.OtherApplicationFrequency.Equals(input.OtherApplicationFrequency))
                ) && 
                (
                    this.CalculationFrequency == input.CalculationFrequency ||
                    (this.CalculationFrequency != null &&
                    this.CalculationFrequency.Equals(input.CalculationFrequency))
                ) && 
                (
                    this.OtherCalculationFrequency == input.OtherCalculationFrequency ||
                    (this.OtherCalculationFrequency != null &&
                    this.OtherCalculationFrequency.Equals(input.OtherCalculationFrequency))
                ) && 
                (
                    this.OtherType == input.OtherType ||
                    (this.OtherType != null &&
                    this.OtherType.Equals(input.OtherType))
                ) && 
                (
                    this.FeatureAndBenefitItem == input.FeatureAndBenefitItem ||
                    this.FeatureAndBenefitItem != null &&
                    input.FeatureAndBenefitItem != null &&
                    this.FeatureAndBenefitItem.SequenceEqual(input.FeatureAndBenefitItem)
                ) && 
                (
                    this.FeatureBenefitEligibility == input.FeatureBenefitEligibility ||
                    this.FeatureBenefitEligibility != null &&
                    input.FeatureBenefitEligibility != null &&
                    this.FeatureBenefitEligibility.SequenceEqual(input.FeatureBenefitEligibility)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Comments != null)
                    hashCode = hashCode * 59 + this.Comments.GetHashCode();
                if (this.BenefitGroupNominalValue != null)
                    hashCode = hashCode * 59 + this.BenefitGroupNominalValue.GetHashCode();
                if (this.Fee != null)
                    hashCode = hashCode * 59 + this.Fee.GetHashCode();
                if (this.ApplicationFrequency != null)
                    hashCode = hashCode * 59 + this.ApplicationFrequency.GetHashCode();
                if (this.OtherApplicationFrequency != null)
                    hashCode = hashCode * 59 + this.OtherApplicationFrequency.GetHashCode();
                if (this.CalculationFrequency != null)
                    hashCode = hashCode * 59 + this.CalculationFrequency.GetHashCode();
                if (this.OtherCalculationFrequency != null)
                    hashCode = hashCode * 59 + this.OtherCalculationFrequency.GetHashCode();
                if (this.OtherType != null)
                    hashCode = hashCode * 59 + this.OtherType.GetHashCode();
                if (this.FeatureAndBenefitItem != null)
                    hashCode = hashCode * 59 + this.FeatureAndBenefitItem.GetHashCode();
                if (this.FeatureBenefitEligibility != null)
                    hashCode = hashCode * 59 + this.FeatureBenefitEligibility.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
