/* 
 * Получение публичной информации о банковских продуктах
 *
 * Содержит описываются API для Открытых банковских интерфейсов для получения публичной информации о банковских продуктах.
 *
 * OpenAPI spec version: 1.3.1
 * Contact: info@fintechru.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Информация о погашениях и выплатах по продуктам
    /// </summary>
    [DataContract]
        public partial class Repayment :  IEquatable<Repayment>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Repayment" /> class.
        /// </summary>
        /// <param name="repaymentType">repaymentType.</param>
        /// <param name="comments">comments.</param>
        /// <param name="repaymentFrequency">repaymentFrequency.</param>
        /// <param name="amountType">amountType.</param>
        /// <param name="paymentDate">paymentDate.</param>
        /// <param name="otherRepaymentType">otherRepaymentType.</param>
        /// <param name="otherRepaymentFrequency">otherRepaymentFrequency.</param>
        /// <param name="otherAmountType">otherAmountType.</param>
        /// <param name="repaymentFeeCharges">Применимая комиссия / сборы за погашение, такие как предоплата, полное досрочное погашение или невыплата.</param>
        /// <param name="repaymentFeeChargeDetail">Подробная информация о комиссиях, сборах, пени и штрафах.</param>
        public Repayment(RepaymentTypeCode repaymentType = default(RepaymentTypeCode), Comments comments = default(Comments), FrequencyType repaymentFrequency = default(FrequencyType), AmountTypeCode amountType = default(AmountTypeCode), PaymentDate paymentDate = default(PaymentDate), OtherTypeCode otherRepaymentType = default(OtherTypeCode), OtherTypeCode otherRepaymentFrequency = default(OtherTypeCode), OtherTypeCode otherAmountType = default(OtherTypeCode), List<InterestFeesCharges> repaymentFeeCharges = default(List<InterestFeesCharges>), List<FeeChargeDetail> repaymentFeeChargeDetail = default(List<FeeChargeDetail>))
        {
            this.RepaymentType = repaymentType;
            this.Comments = comments;
            this.RepaymentFrequency = repaymentFrequency;
            this.AmountType = amountType;
            this.PaymentDate = paymentDate;
            this.OtherRepaymentType = otherRepaymentType;
            this.OtherRepaymentFrequency = otherRepaymentFrequency;
            this.OtherAmountType = otherAmountType;
            this.RepaymentFeeCharges = repaymentFeeCharges;
            this.RepaymentFeeChargeDetail = repaymentFeeChargeDetail;
        }
        
        /// <summary>
        /// Gets or Sets RepaymentType
        /// </summary>
        [DataMember(Name="repaymentType", EmitDefaultValue=false)]
        public RepaymentTypeCode RepaymentType { get; set; }

        /// <summary>
        /// Gets or Sets Comments
        /// </summary>
        [DataMember(Name="comments", EmitDefaultValue=false)]
        public Comments Comments { get; set; }

        /// <summary>
        /// Gets or Sets RepaymentFrequency
        /// </summary>
        [DataMember(Name="repaymentFrequency", EmitDefaultValue=false)]
        public FrequencyType RepaymentFrequency { get; set; }

        /// <summary>
        /// Gets or Sets AmountType
        /// </summary>
        [DataMember(Name="amountType", EmitDefaultValue=false)]
        public AmountTypeCode AmountType { get; set; }

        /// <summary>
        /// Gets or Sets PaymentDate
        /// </summary>
        [DataMember(Name="PaymentDate", EmitDefaultValue=false)]
        public PaymentDate PaymentDate { get; set; }

        /// <summary>
        /// Gets or Sets OtherRepaymentType
        /// </summary>
        [DataMember(Name="OtherRepaymentType", EmitDefaultValue=false)]
        public OtherTypeCode OtherRepaymentType { get; set; }

        /// <summary>
        /// Gets or Sets OtherRepaymentFrequency
        /// </summary>
        [DataMember(Name="OtherRepaymentFrequency", EmitDefaultValue=false)]
        public OtherTypeCode OtherRepaymentFrequency { get; set; }

        /// <summary>
        /// Gets or Sets OtherAmountType
        /// </summary>
        [DataMember(Name="OtherAmountType", EmitDefaultValue=false)]
        public OtherTypeCode OtherAmountType { get; set; }

        /// <summary>
        /// Применимая комиссия / сборы за погашение, такие как предоплата, полное досрочное погашение или невыплата
        /// </summary>
        /// <value>Применимая комиссия / сборы за погашение, такие как предоплата, полное досрочное погашение или невыплата</value>
        [DataMember(Name="RepaymentFeeCharges", EmitDefaultValue=false)]
        public List<InterestFeesCharges> RepaymentFeeCharges { get; set; }

        /// <summary>
        /// Подробная информация о комиссиях, сборах, пени и штрафах
        /// </summary>
        /// <value>Подробная информация о комиссиях, сборах, пени и штрафах</value>
        [DataMember(Name="RepaymentFeeChargeDetail", EmitDefaultValue=false)]
        public List<FeeChargeDetail> RepaymentFeeChargeDetail { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Repayment {\n");
            sb.Append("  RepaymentType: ").Append(RepaymentType).Append("\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("  RepaymentFrequency: ").Append(RepaymentFrequency).Append("\n");
            sb.Append("  AmountType: ").Append(AmountType).Append("\n");
            sb.Append("  PaymentDate: ").Append(PaymentDate).Append("\n");
            sb.Append("  OtherRepaymentType: ").Append(OtherRepaymentType).Append("\n");
            sb.Append("  OtherRepaymentFrequency: ").Append(OtherRepaymentFrequency).Append("\n");
            sb.Append("  OtherAmountType: ").Append(OtherAmountType).Append("\n");
            sb.Append("  RepaymentFeeCharges: ").Append(RepaymentFeeCharges).Append("\n");
            sb.Append("  RepaymentFeeChargeDetail: ").Append(RepaymentFeeChargeDetail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Repayment);
        }

        /// <summary>
        /// Returns true if Repayment instances are equal
        /// </summary>
        /// <param name="input">Instance of Repayment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Repayment input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RepaymentType == input.RepaymentType ||
                    (this.RepaymentType != null &&
                    this.RepaymentType.Equals(input.RepaymentType))
                ) && 
                (
                    this.Comments == input.Comments ||
                    (this.Comments != null &&
                    this.Comments.Equals(input.Comments))
                ) && 
                (
                    this.RepaymentFrequency == input.RepaymentFrequency ||
                    (this.RepaymentFrequency != null &&
                    this.RepaymentFrequency.Equals(input.RepaymentFrequency))
                ) && 
                (
                    this.AmountType == input.AmountType ||
                    (this.AmountType != null &&
                    this.AmountType.Equals(input.AmountType))
                ) && 
                (
                    this.PaymentDate == input.PaymentDate ||
                    (this.PaymentDate != null &&
                    this.PaymentDate.Equals(input.PaymentDate))
                ) && 
                (
                    this.OtherRepaymentType == input.OtherRepaymentType ||
                    (this.OtherRepaymentType != null &&
                    this.OtherRepaymentType.Equals(input.OtherRepaymentType))
                ) && 
                (
                    this.OtherRepaymentFrequency == input.OtherRepaymentFrequency ||
                    (this.OtherRepaymentFrequency != null &&
                    this.OtherRepaymentFrequency.Equals(input.OtherRepaymentFrequency))
                ) && 
                (
                    this.OtherAmountType == input.OtherAmountType ||
                    (this.OtherAmountType != null &&
                    this.OtherAmountType.Equals(input.OtherAmountType))
                ) && 
                (
                    this.RepaymentFeeCharges == input.RepaymentFeeCharges ||
                    this.RepaymentFeeCharges != null &&
                    input.RepaymentFeeCharges != null &&
                    this.RepaymentFeeCharges.SequenceEqual(input.RepaymentFeeCharges)
                ) && 
                (
                    this.RepaymentFeeChargeDetail == input.RepaymentFeeChargeDetail ||
                    this.RepaymentFeeChargeDetail != null &&
                    input.RepaymentFeeChargeDetail != null &&
                    this.RepaymentFeeChargeDetail.SequenceEqual(input.RepaymentFeeChargeDetail)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RepaymentType != null)
                    hashCode = hashCode * 59 + this.RepaymentType.GetHashCode();
                if (this.Comments != null)
                    hashCode = hashCode * 59 + this.Comments.GetHashCode();
                if (this.RepaymentFrequency != null)
                    hashCode = hashCode * 59 + this.RepaymentFrequency.GetHashCode();
                if (this.AmountType != null)
                    hashCode = hashCode * 59 + this.AmountType.GetHashCode();
                if (this.PaymentDate != null)
                    hashCode = hashCode * 59 + this.PaymentDate.GetHashCode();
                if (this.OtherRepaymentType != null)
                    hashCode = hashCode * 59 + this.OtherRepaymentType.GetHashCode();
                if (this.OtherRepaymentFrequency != null)
                    hashCode = hashCode * 59 + this.OtherRepaymentFrequency.GetHashCode();
                if (this.OtherAmountType != null)
                    hashCode = hashCode * 59 + this.OtherAmountType.GetHashCode();
                if (this.RepaymentFeeCharges != null)
                    hashCode = hashCode * 59 + this.RepaymentFeeCharges.GetHashCode();
                if (this.RepaymentFeeChargeDetail != null)
                    hashCode = hashCode * 59 + this.RepaymentFeeChargeDetail.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
