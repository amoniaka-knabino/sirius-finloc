/* 
 * Получение публичной информации о банковских продуктах
 *
 * Содержит описываются API для Открытых банковских интерфейсов для получения публичной информации о банковских продуктах.
 *
 * OpenAPI spec version: 1.3.1
 * Contact: info@fintechru.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Информация о банкнотах
    /// </summary>
    [DataContract]
        public partial class Banknote :  IEquatable<Banknote>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Banknote" /> class.
        /// </summary>
        /// <param name="currency">currency (required).</param>
        /// <param name="banknoteType">Номинал купюр.</param>
        public Banknote(string currency = default(string), string banknoteType = default(string))
        {
            // to ensure "currency" is required (not null)
            if (currency == null)
            {
                throw new InvalidDataException("currency is a required property for Banknote and cannot be null");
            }
            else
            {
                this.Currency = currency;
            }
            this.BanknoteType = banknoteType;
        }
        
        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public string Currency { get; set; }

        /// <summary>
        /// Номинал купюр
        /// </summary>
        /// <value>Номинал купюр</value>
        [DataMember(Name="banknoteType", EmitDefaultValue=false)]
        public string BanknoteType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Banknote {\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  BanknoteType: ").Append(BanknoteType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Banknote);
        }

        /// <summary>
        /// Returns true if Banknote instances are equal
        /// </summary>
        /// <param name="input">Instance of Banknote to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Banknote input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.BanknoteType == input.BanknoteType ||
                    (this.BanknoteType != null &&
                    this.BanknoteType.Equals(input.BanknoteType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.BanknoteType != null)
                    hashCode = hashCode * 59 + this.BanknoteType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
