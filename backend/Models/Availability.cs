/* 
 * Получение публичной информации о банковских продуктах
 *
 * Содержит описываются API для Открытых банковских интерфейсов для получения публичной информации о банковских продуктах.
 *
 * OpenAPI spec version: 1.3.1
 * Contact: info@fintechru.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Комплексный тип доступности.
    /// </summary>
    [DataContract]
        public partial class Availability :  IEquatable<Availability>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Availability" /> class.
        /// </summary>
        /// <param name="access24Hours">Круглосуточный режим работы.</param>
        /// <param name="isRestricted">Доступ к объекту ограничен системой пропуска и прочее.</param>
        /// <param name="sameAsOrganization">Режим работы объекта зависит от режима работы другого объекта, в котором описываемый объект расположен.</param>
        /// <param name="description">Дополнительная информация в свободной форме.</param>
        /// <param name="standardAvailability">standardAvailability.</param>
        /// <param name="nonStandardAvailability">Не стандартная доступность.</param>
        public Availability(bool? access24Hours = default(bool?), bool? isRestricted = default(bool?), bool? sameAsOrganization = default(bool?), string description = default(string), StandardAvailability standardAvailability = default(StandardAvailability), List<NonStandardAvailability> nonStandardAvailability = default(List<NonStandardAvailability>))
        {
            this.Access24Hours = access24Hours;
            this.IsRestricted = isRestricted;
            this.SameAsOrganization = sameAsOrganization;
            this.Description = description;
            this.StandardAvailability = standardAvailability;
            this.NonStandardAvailability = nonStandardAvailability;
        }
        
        /// <summary>
        /// Круглосуточный режим работы
        /// </summary>
        /// <value>Круглосуточный режим работы</value>
        [DataMember(Name="access24Hours", EmitDefaultValue=false)]
        public bool? Access24Hours { get; set; }

        /// <summary>
        /// Доступ к объекту ограничен системой пропуска и прочее
        /// </summary>
        /// <value>Доступ к объекту ограничен системой пропуска и прочее</value>
        [DataMember(Name="isRestricted", EmitDefaultValue=false)]
        public bool? IsRestricted { get; set; }

        /// <summary>
        /// Режим работы объекта зависит от режима работы другого объекта, в котором описываемый объект расположен
        /// </summary>
        /// <value>Режим работы объекта зависит от режима работы другого объекта, в котором описываемый объект расположен</value>
        [DataMember(Name="sameAsOrganization", EmitDefaultValue=false)]
        public bool? SameAsOrganization { get; set; }

        /// <summary>
        /// Дополнительная информация в свободной форме
        /// </summary>
        /// <value>Дополнительная информация в свободной форме</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets StandardAvailability
        /// </summary>
        [DataMember(Name="StandardAvailability", EmitDefaultValue=false)]
        public StandardAvailability StandardAvailability { get; set; }

        /// <summary>
        /// Не стандартная доступность
        /// </summary>
        /// <value>Не стандартная доступность</value>
        [DataMember(Name="NonStandardAvailability", EmitDefaultValue=false)]
        public List<NonStandardAvailability> NonStandardAvailability { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Availability {\n");
            sb.Append("  Access24Hours: ").Append(Access24Hours).Append("\n");
            sb.Append("  IsRestricted: ").Append(IsRestricted).Append("\n");
            sb.Append("  SameAsOrganization: ").Append(SameAsOrganization).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  StandardAvailability: ").Append(StandardAvailability).Append("\n");
            sb.Append("  NonStandardAvailability: ").Append(NonStandardAvailability).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Availability);
        }

        /// <summary>
        /// Returns true if Availability instances are equal
        /// </summary>
        /// <param name="input">Instance of Availability to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Availability input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Access24Hours == input.Access24Hours ||
                    (this.Access24Hours != null &&
                    this.Access24Hours.Equals(input.Access24Hours))
                ) && 
                (
                    this.IsRestricted == input.IsRestricted ||
                    (this.IsRestricted != null &&
                    this.IsRestricted.Equals(input.IsRestricted))
                ) && 
                (
                    this.SameAsOrganization == input.SameAsOrganization ||
                    (this.SameAsOrganization != null &&
                    this.SameAsOrganization.Equals(input.SameAsOrganization))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.StandardAvailability == input.StandardAvailability ||
                    (this.StandardAvailability != null &&
                    this.StandardAvailability.Equals(input.StandardAvailability))
                ) && 
                (
                    this.NonStandardAvailability == input.NonStandardAvailability ||
                    this.NonStandardAvailability != null &&
                    input.NonStandardAvailability != null &&
                    this.NonStandardAvailability.SequenceEqual(input.NonStandardAvailability)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Access24Hours != null)
                    hashCode = hashCode * 59 + this.Access24Hours.GetHashCode();
                if (this.IsRestricted != null)
                    hashCode = hashCode * 59 + this.IsRestricted.GetHashCode();
                if (this.SameAsOrganization != null)
                    hashCode = hashCode * 59 + this.SameAsOrganization.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.StandardAvailability != null)
                    hashCode = hashCode * 59 + this.StandardAvailability.GetHashCode();
                if (this.NonStandardAvailability != null)
                    hashCode = hashCode * 59 + this.NonStandardAvailability.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
