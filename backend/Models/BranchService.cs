/* 
 * Получение публичной информации о банковских продуктах
 *
 * Содержит описываются API для Открытых банковских интерфейсов для получения публичной информации о банковских продуктах.
 *
 * OpenAPI spec version: 1.3.1
 * Contact: info@fintechru.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Услуга отделения кредитной организации
    /// </summary>
    [DataContract]
        public partial class BranchService :  IEquatable<BranchService>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BranchService" /> class.
        /// </summary>
        /// <param name="serviceId">Уникальный и неизменный идентификатор, используемый для идентификации ресурса &#x27;services&#x27; (required).</param>
        /// <param name="type">type (required).</param>
        /// <param name="name">Наименование услуги (required).</param>
        /// <param name="segment">segment (required).</param>
        /// <param name="dateTime">dateTime (required).</param>
        /// <param name="currentStatus">currentStatus.</param>
        /// <param name="description">Дополнительная информация в свободной форме.</param>
        /// <param name="url">URL адрес услуги.</param>
        public BranchService(string serviceId = default(string), ServiceTypeCode type = default(ServiceTypeCode), string name = default(string), SegmentCode segment = default(SegmentCode), DateTime? dateTime = default(DateTime?), ServiceCurrentStatusCode currentStatus = default(ServiceCurrentStatusCode), string description = default(string), string url = default(string))
        {
            // to ensure "serviceId" is required (not null)
            if (serviceId == null)
            {
                throw new InvalidDataException("serviceId is a required property for BranchService and cannot be null");
            }
            else
            {
                this.ServiceId = serviceId;
            }
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for BranchService and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for BranchService and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "segment" is required (not null)
            if (segment == null)
            {
                throw new InvalidDataException("segment is a required property for BranchService and cannot be null");
            }
            else
            {
                this.Segment = segment;
            }
            // to ensure "dateTime" is required (not null)
            if (dateTime == null)
            {
                throw new InvalidDataException("dateTime is a required property for BranchService and cannot be null");
            }
            else
            {
                this.DateTime = dateTime;
            }
            this.CurrentStatus = currentStatus;
            this.Description = description;
            this.Url = url;
        }
        
        /// <summary>
        /// Уникальный и неизменный идентификатор, используемый для идентификации ресурса &#x27;services&#x27;
        /// </summary>
        /// <value>Уникальный и неизменный идентификатор, используемый для идентификации ресурса &#x27;services&#x27;</value>
        [DataMember(Name="serviceId", EmitDefaultValue=false)]
        public string ServiceId { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public ServiceTypeCode Type { get; set; }

        /// <summary>
        /// Наименование услуги
        /// </summary>
        /// <value>Наименование услуги</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Segment
        /// </summary>
        [DataMember(Name="segment", EmitDefaultValue=false)]
        public SegmentCode Segment { get; set; }

        /// <summary>
        /// Gets or Sets DateTime
        /// </summary>
        [DataMember(Name="dateTime", EmitDefaultValue=false)]
        public DateTime? DateTime { get; set; }

        /// <summary>
        /// Gets or Sets CurrentStatus
        /// </summary>
        [DataMember(Name="currentStatus", EmitDefaultValue=false)]
        public ServiceCurrentStatusCode CurrentStatus { get; set; }

        /// <summary>
        /// Дополнительная информация в свободной форме
        /// </summary>
        /// <value>Дополнительная информация в свободной форме</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// URL адрес услуги
        /// </summary>
        /// <value>URL адрес услуги</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BranchService {\n");
            sb.Append("  ServiceId: ").Append(ServiceId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Segment: ").Append(Segment).Append("\n");
            sb.Append("  DateTime: ").Append(DateTime).Append("\n");
            sb.Append("  CurrentStatus: ").Append(CurrentStatus).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BranchService);
        }

        /// <summary>
        /// Returns true if BranchService instances are equal
        /// </summary>
        /// <param name="input">Instance of BranchService to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BranchService input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ServiceId == input.ServiceId ||
                    (this.ServiceId != null &&
                    this.ServiceId.Equals(input.ServiceId))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Segment == input.Segment ||
                    (this.Segment != null &&
                    this.Segment.Equals(input.Segment))
                ) && 
                (
                    this.DateTime == input.DateTime ||
                    (this.DateTime != null &&
                    this.DateTime.Equals(input.DateTime))
                ) && 
                (
                    this.CurrentStatus == input.CurrentStatus ||
                    (this.CurrentStatus != null &&
                    this.CurrentStatus.Equals(input.CurrentStatus))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ServiceId != null)
                    hashCode = hashCode * 59 + this.ServiceId.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Segment != null)
                    hashCode = hashCode * 59 + this.Segment.GetHashCode();
                if (this.DateTime != null)
                    hashCode = hashCode * 59 + this.DateTime.GetHashCode();
                if (this.CurrentStatus != null)
                    hashCode = hashCode * 59 + this.CurrentStatus.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
