/* 
 * Получение публичной информации о банковских продуктах
 *
 * Содержит описываются API для Открытых банковских интерфейсов для получения публичной информации о банковских продуктах.
 *
 * OpenAPI spec version: 1.3.1
 * Contact: info@fintechru.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Не стандартная доступность
    /// </summary>
    [DataContract]
        public partial class NonStandardAvailability :  IEquatable<NonStandardAvailability>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NonStandardAvailability" /> class.
        /// </summary>
        /// <param name="name">Наименование праздничного дня. Например, \&quot;Рождество\&quot;, \&quot;Новый Год\&quot;..</param>
        /// <param name="fromDate">fromDate.</param>
        /// <param name="toDate">toDate.</param>
        /// <param name="description">Дополнительная информация в свободной форме.</param>
        /// <param name="day">Дни и время работы.</param>
        public NonStandardAvailability(string name = default(string), DateTime? fromDate = default(DateTime?), DateTime? toDate = default(DateTime?), string description = default(string), List<Day> day = default(List<Day>))
        {
            this.Name = name;
            this.FromDate = fromDate;
            this.ToDate = toDate;
            this.Description = description;
            this.Day = day;
        }
        
        /// <summary>
        /// Наименование праздничного дня. Например, \&quot;Рождество\&quot;, \&quot;Новый Год\&quot;.
        /// </summary>
        /// <value>Наименование праздничного дня. Например, \&quot;Рождество\&quot;, \&quot;Новый Год\&quot;.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets FromDate
        /// </summary>
        [DataMember(Name="fromDate", EmitDefaultValue=false)]
        public DateTime? FromDate { get; set; }

        /// <summary>
        /// Gets or Sets ToDate
        /// </summary>
        [DataMember(Name="toDate", EmitDefaultValue=false)]
        public DateTime? ToDate { get; set; }

        /// <summary>
        /// Дополнительная информация в свободной форме
        /// </summary>
        /// <value>Дополнительная информация в свободной форме</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Дни и время работы
        /// </summary>
        /// <value>Дни и время работы</value>
        [DataMember(Name="Day", EmitDefaultValue=false)]
        public List<Day> Day { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NonStandardAvailability {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  FromDate: ").Append(FromDate).Append("\n");
            sb.Append("  ToDate: ").Append(ToDate).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Day: ").Append(Day).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NonStandardAvailability);
        }

        /// <summary>
        /// Returns true if NonStandardAvailability instances are equal
        /// </summary>
        /// <param name="input">Instance of NonStandardAvailability to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NonStandardAvailability input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.FromDate == input.FromDate ||
                    (this.FromDate != null &&
                    this.FromDate.Equals(input.FromDate))
                ) && 
                (
                    this.ToDate == input.ToDate ||
                    (this.ToDate != null &&
                    this.ToDate.Equals(input.ToDate))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Day == input.Day ||
                    this.Day != null &&
                    input.Day != null &&
                    this.Day.SequenceEqual(input.Day)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.FromDate != null)
                    hashCode = hashCode * 59 + this.FromDate.GetHashCode();
                if (this.ToDate != null)
                    hashCode = hashCode * 59 + this.ToDate.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Day != null)
                    hashCode = hashCode * 59 + this.Day.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
