/* 
 * Получение публичной информации о банковских продуктах
 *
 * Содержит описываются API для Открытых банковских интерфейсов для получения публичной информации о банковских продуктах.
 *
 * OpenAPI spec version: 1.3.1
 * Contact: info@fintechru.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Дни и время работы
    /// </summary>
    [DataContract]
        public partial class Day :  IEquatable<Day>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Day" /> class.
        /// </summary>
        /// <param name="dayCode">dayCode.</param>
        /// <param name="openingTime">openingTime.</param>
        /// <param name="closingTime">closingTime.</param>
        /// <param name="breakTime">Информация о перерывах в работе.</param>
        public Day(WeekDayCode dayCode = default(WeekDayCode), DateTime? openingTime = default(DateTime?), DateTime? closingTime = default(DateTime?), List<BreakTime> breakTime = default(List<BreakTime>))
        {
            this.DayCode = dayCode;
            this.OpeningTime = openingTime;
            this.ClosingTime = closingTime;
            this.BreakTime = breakTime;
        }
        
        /// <summary>
        /// Gets or Sets DayCode
        /// </summary>
        [DataMember(Name="dayCode", EmitDefaultValue=false)]
        public WeekDayCode DayCode { get; set; }

        /// <summary>
        /// Gets or Sets OpeningTime
        /// </summary>
        [DataMember(Name="openingTime", EmitDefaultValue=false)]
        public DateTime? OpeningTime { get; set; }

        /// <summary>
        /// Gets or Sets ClosingTime
        /// </summary>
        [DataMember(Name="closingTime", EmitDefaultValue=false)]
        public DateTime? ClosingTime { get; set; }

        /// <summary>
        /// Информация о перерывах в работе
        /// </summary>
        /// <value>Информация о перерывах в работе</value>
        [DataMember(Name="BreakTime", EmitDefaultValue=false)]
        public List<BreakTime> BreakTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Day {\n");
            sb.Append("  DayCode: ").Append(DayCode).Append("\n");
            sb.Append("  OpeningTime: ").Append(OpeningTime).Append("\n");
            sb.Append("  ClosingTime: ").Append(ClosingTime).Append("\n");
            sb.Append("  BreakTime: ").Append(BreakTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Day);
        }

        /// <summary>
        /// Returns true if Day instances are equal
        /// </summary>
        /// <param name="input">Instance of Day to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Day input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DayCode == input.DayCode ||
                    (this.DayCode != null &&
                    this.DayCode.Equals(input.DayCode))
                ) && 
                (
                    this.OpeningTime == input.OpeningTime ||
                    (this.OpeningTime != null &&
                    this.OpeningTime.Equals(input.OpeningTime))
                ) && 
                (
                    this.ClosingTime == input.ClosingTime ||
                    (this.ClosingTime != null &&
                    this.ClosingTime.Equals(input.ClosingTime))
                ) && 
                (
                    this.BreakTime == input.BreakTime ||
                    this.BreakTime != null &&
                    input.BreakTime != null &&
                    this.BreakTime.SequenceEqual(input.BreakTime)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DayCode != null)
                    hashCode = hashCode * 59 + this.DayCode.GetHashCode();
                if (this.OpeningTime != null)
                    hashCode = hashCode * 59 + this.OpeningTime.GetHashCode();
                if (this.ClosingTime != null)
                    hashCode = hashCode * 59 + this.ClosingTime.GetHashCode();
                if (this.BreakTime != null)
                    hashCode = hashCode * 59 + this.BreakTime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
