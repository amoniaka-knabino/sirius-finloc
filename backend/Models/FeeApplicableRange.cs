/* 
 * Получение публичной информации о банковских продуктах
 *
 * Содержит описываются API для Открытых банковских интерфейсов для получения публичной информации о банковских продуктах.
 *
 * OpenAPI spec version: 1.3.1
 * Contact: info@fintechru.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Диапазон суммы или ставки,  для которых применяется комиссия / сбор / пени / штраф
    /// </summary>
    [DataContract]
        public partial class FeeApplicableRange :  IEquatable<FeeApplicableRange>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FeeApplicableRange" /> class.
        /// </summary>
        /// <param name="minimumAmount">minimumAmount.</param>
        /// <param name="maximumAmount">maximumAmount.</param>
        /// <param name="minimumRate">minimumRate.</param>
        /// <param name="maximumRate">maximumRate.</param>
        public FeeApplicableRange(string minimumAmount = default(string), string maximumAmount = default(string), string minimumRate = default(string), string maximumRate = default(string))
        {
            this.MinimumAmount = minimumAmount;
            this.MaximumAmount = maximumAmount;
            this.MinimumRate = minimumRate;
            this.MaximumRate = maximumRate;
        }
        
        /// <summary>
        /// Gets or Sets MinimumAmount
        /// </summary>
        [DataMember(Name="minimumAmount", EmitDefaultValue=false)]
        public string MinimumAmount { get; set; }

        /// <summary>
        /// Gets or Sets MaximumAmount
        /// </summary>
        [DataMember(Name="maximumAmount", EmitDefaultValue=false)]
        public string MaximumAmount { get; set; }

        /// <summary>
        /// Gets or Sets MinimumRate
        /// </summary>
        [DataMember(Name="minimumRate", EmitDefaultValue=false)]
        public string MinimumRate { get; set; }

        /// <summary>
        /// Gets or Sets MaximumRate
        /// </summary>
        [DataMember(Name="maximumRate", EmitDefaultValue=false)]
        public string MaximumRate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FeeApplicableRange {\n");
            sb.Append("  MinimumAmount: ").Append(MinimumAmount).Append("\n");
            sb.Append("  MaximumAmount: ").Append(MaximumAmount).Append("\n");
            sb.Append("  MinimumRate: ").Append(MinimumRate).Append("\n");
            sb.Append("  MaximumRate: ").Append(MaximumRate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FeeApplicableRange);
        }

        /// <summary>
        /// Returns true if FeeApplicableRange instances are equal
        /// </summary>
        /// <param name="input">Instance of FeeApplicableRange to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FeeApplicableRange input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MinimumAmount == input.MinimumAmount ||
                    (this.MinimumAmount != null &&
                    this.MinimumAmount.Equals(input.MinimumAmount))
                ) && 
                (
                    this.MaximumAmount == input.MaximumAmount ||
                    (this.MaximumAmount != null &&
                    this.MaximumAmount.Equals(input.MaximumAmount))
                ) && 
                (
                    this.MinimumRate == input.MinimumRate ||
                    (this.MinimumRate != null &&
                    this.MinimumRate.Equals(input.MinimumRate))
                ) && 
                (
                    this.MaximumRate == input.MaximumRate ||
                    (this.MaximumRate != null &&
                    this.MaximumRate.Equals(input.MaximumRate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MinimumAmount != null)
                    hashCode = hashCode * 59 + this.MinimumAmount.GetHashCode();
                if (this.MaximumAmount != null)
                    hashCode = hashCode * 59 + this.MaximumAmount.GetHashCode();
                if (this.MinimumRate != null)
                    hashCode = hashCode * 59 + this.MinimumRate.GetHashCode();
                if (this.MaximumRate != null)
                    hashCode = hashCode * 59 + this.MaximumRate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
