/* 
 * Получение публичной информации о банковских продуктах
 *
 * Содержит описываются API для Открытых банковских интерфейсов для получения публичной информации о банковских продуктах.
 *
 * OpenAPI spec version: 1.3.1
 * Contact: info@fintechru.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Информация о комиссиях, сборах, пени и штрафах
    /// </summary>
    [DataContract]
        public partial class InterestFeesCharges :  IEquatable<InterestFeesCharges>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InterestFeesCharges" /> class.
        /// </summary>
        /// <param name="feeChargeDetail">Подробная информация о комиссиях, сборах, пени и штрафах (required).</param>
        /// <param name="feeChargeCap">Подробная информация о любых ограничениях  (минимальных / максимальных ), которые  применяются к конкретной комиссии / сбору / пени / штрафы.</param>
        public InterestFeesCharges(List<FeeChargeDetail> feeChargeDetail = default(List<FeeChargeDetail>), List<FeeChargeCap> feeChargeCap = default(List<FeeChargeCap>))
        {
            // to ensure "feeChargeDetail" is required (not null)
            if (feeChargeDetail == null)
            {
                throw new InvalidDataException("feeChargeDetail is a required property for InterestFeesCharges and cannot be null");
            }
            else
            {
                this.FeeChargeDetail = feeChargeDetail;
            }
            this.FeeChargeCap = feeChargeCap;
        }
        
        /// <summary>
        /// Подробная информация о комиссиях, сборах, пени и штрафах
        /// </summary>
        /// <value>Подробная информация о комиссиях, сборах, пени и штрафах</value>
        [DataMember(Name="FeeChargeDetail", EmitDefaultValue=false)]
        public List<FeeChargeDetail> FeeChargeDetail { get; set; }

        /// <summary>
        /// Подробная информация о любых ограничениях  (минимальных / максимальных ), которые  применяются к конкретной комиссии / сбору / пени / штрафы
        /// </summary>
        /// <value>Подробная информация о любых ограничениях  (минимальных / максимальных ), которые  применяются к конкретной комиссии / сбору / пени / штрафы</value>
        [DataMember(Name="FeeChargeCap", EmitDefaultValue=false)]
        public List<FeeChargeCap> FeeChargeCap { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InterestFeesCharges {\n");
            sb.Append("  FeeChargeDetail: ").Append(FeeChargeDetail).Append("\n");
            sb.Append("  FeeChargeCap: ").Append(FeeChargeCap).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InterestFeesCharges);
        }

        /// <summary>
        /// Returns true if InterestFeesCharges instances are equal
        /// </summary>
        /// <param name="input">Instance of InterestFeesCharges to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InterestFeesCharges input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FeeChargeDetail == input.FeeChargeDetail ||
                    this.FeeChargeDetail != null &&
                    input.FeeChargeDetail != null &&
                    this.FeeChargeDetail.SequenceEqual(input.FeeChargeDetail)
                ) && 
                (
                    this.FeeChargeCap == input.FeeChargeCap ||
                    this.FeeChargeCap != null &&
                    input.FeeChargeCap != null &&
                    this.FeeChargeCap.SequenceEqual(input.FeeChargeCap)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FeeChargeDetail != null)
                    hashCode = hashCode * 59 + this.FeeChargeDetail.GetHashCode();
                if (this.FeeChargeCap != null)
                    hashCode = hashCode * 59 + this.FeeChargeCap.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
