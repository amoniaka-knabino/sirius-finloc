/* 
 * Получение публичной информации о банковских продуктах
 *
 * Содержит описываются API для Открытых банковских интерфейсов для получения публичной информации о банковских продуктах.
 *
 * OpenAPI spec version: 1.3.1
 * Contact: info@fintechru.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Подробная информация о любых ограничениях (минимальных / максимальных сборах), которые применяются к конкретной комиссии / сбору / пени / штрафу
    /// </summary>
    [DataContract]
        public partial class FeeChargeCap :  IEquatable<FeeChargeCap>, IValidatableObject
    {
        /// <summary>
        /// Указывает минимальная или максимальная комиссия
        /// </summary>
        /// <value>Указывает минимальная или максимальная комиссия</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum MinMaxTypeEnum
        {
            /// <summary>
            /// Enum Minimum for value: Minimum
            /// </summary>
            [EnumMember(Value = "Minimum")]
            Minimum = 1,
            /// <summary>
            /// Enum Maximum for value: Maximum
            /// </summary>
            [EnumMember(Value = "Maximum")]
            Maximum = 2        }
        /// <summary>
        /// Указывает минимальная или максимальная комиссия
        /// </summary>
        /// <value>Указывает минимальная или максимальная комиссия</value>
        [DataMember(Name="minMaxType", EmitDefaultValue=false)]
        public MinMaxTypeEnum MinMaxType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FeeChargeCap" /> class.
        /// </summary>
        /// <param name="feeType">feeType.</param>
        /// <param name="minMaxType">Указывает минимальная или максимальная комиссия (required).</param>
        /// <param name="feeCapOccurrence">Комиссия / сборы / пени / штрафы фиксируются в зависимости от количества случаев, а не ограничиваются определенной суммой.</param>
        /// <param name="feeCapAmount">feeCapAmount.</param>
        /// <param name="cappingPeriod">cappingPeriod.</param>
        /// <param name="comments">comments.</param>
        public FeeChargeCap(FeeTypeCode feeType = default(FeeTypeCode), MinMaxTypeEnum minMaxType = default(MinMaxTypeEnum), int? feeCapOccurrence = default(int?), string feeCapAmount = default(string), PeriodUnit cappingPeriod = default(PeriodUnit), Comments comments = default(Comments))
        {
            // to ensure "minMaxType" is required (not null)
            if (minMaxType == null)
            {
                throw new InvalidDataException("minMaxType is a required property for FeeChargeCap and cannot be null");
            }
            else
            {
                this.MinMaxType = minMaxType;
            }
            this.FeeType = feeType;
            this.FeeCapOccurrence = feeCapOccurrence;
            this.FeeCapAmount = feeCapAmount;
            this.CappingPeriod = cappingPeriod;
            this.Comments = comments;
        }
        
        /// <summary>
        /// Gets or Sets FeeType
        /// </summary>
        [DataMember(Name="feeType", EmitDefaultValue=false)]
        public FeeTypeCode FeeType { get; set; }


        /// <summary>
        /// Комиссия / сборы / пени / штрафы фиксируются в зависимости от количества случаев, а не ограничиваются определенной суммой
        /// </summary>
        /// <value>Комиссия / сборы / пени / штрафы фиксируются в зависимости от количества случаев, а не ограничиваются определенной суммой</value>
        [DataMember(Name="feeCapOccurrence", EmitDefaultValue=false)]
        public int? FeeCapOccurrence { get; set; }

        /// <summary>
        /// Gets or Sets FeeCapAmount
        /// </summary>
        [DataMember(Name="feeCapAmount", EmitDefaultValue=false)]
        public string FeeCapAmount { get; set; }

        /// <summary>
        /// Gets or Sets CappingPeriod
        /// </summary>
        [DataMember(Name="cappingPeriod", EmitDefaultValue=false)]
        public PeriodUnit CappingPeriod { get; set; }

        /// <summary>
        /// Gets or Sets Comments
        /// </summary>
        [DataMember(Name="comments", EmitDefaultValue=false)]
        public Comments Comments { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FeeChargeCap {\n");
            sb.Append("  FeeType: ").Append(FeeType).Append("\n");
            sb.Append("  MinMaxType: ").Append(MinMaxType).Append("\n");
            sb.Append("  FeeCapOccurrence: ").Append(FeeCapOccurrence).Append("\n");
            sb.Append("  FeeCapAmount: ").Append(FeeCapAmount).Append("\n");
            sb.Append("  CappingPeriod: ").Append(CappingPeriod).Append("\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FeeChargeCap);
        }

        /// <summary>
        /// Returns true if FeeChargeCap instances are equal
        /// </summary>
        /// <param name="input">Instance of FeeChargeCap to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FeeChargeCap input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FeeType == input.FeeType ||
                    (this.FeeType != null &&
                    this.FeeType.Equals(input.FeeType))
                ) && 
                (
                    this.MinMaxType == input.MinMaxType ||
                    (this.MinMaxType != null &&
                    this.MinMaxType.Equals(input.MinMaxType))
                ) && 
                (
                    this.FeeCapOccurrence == input.FeeCapOccurrence ||
                    (this.FeeCapOccurrence != null &&
                    this.FeeCapOccurrence.Equals(input.FeeCapOccurrence))
                ) && 
                (
                    this.FeeCapAmount == input.FeeCapAmount ||
                    (this.FeeCapAmount != null &&
                    this.FeeCapAmount.Equals(input.FeeCapAmount))
                ) && 
                (
                    this.CappingPeriod == input.CappingPeriod ||
                    (this.CappingPeriod != null &&
                    this.CappingPeriod.Equals(input.CappingPeriod))
                ) && 
                (
                    this.Comments == input.Comments ||
                    (this.Comments != null &&
                    this.Comments.Equals(input.Comments))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FeeType != null)
                    hashCode = hashCode * 59 + this.FeeType.GetHashCode();
                if (this.MinMaxType != null)
                    hashCode = hashCode * 59 + this.MinMaxType.GetHashCode();
                if (this.FeeCapOccurrence != null)
                    hashCode = hashCode * 59 + this.FeeCapOccurrence.GetHashCode();
                if (this.FeeCapAmount != null)
                    hashCode = hashCode * 59 + this.FeeCapAmount.GetHashCode();
                if (this.CappingPeriod != null)
                    hashCode = hashCode * 59 + this.CappingPeriod.GetHashCode();
                if (this.Comments != null)
                    hashCode = hashCode * 59 + this.Comments.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
