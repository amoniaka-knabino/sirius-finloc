/* 
 * Получение публичной информации о банковских продуктах
 *
 * Содержит описываются API для Открытых банковских интерфейсов для получения публичной информации о банковских продуктах.
 *
 * OpenAPI spec version: 1.3.1
 * Contact: info@fintechru.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Критерии приемлемости
    /// </summary>
    [DataContract]
        public partial class Eligibility :  IEquatable<Eligibility>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Eligibility" /> class.
        /// </summary>
        /// <param name="name">Наименование, указанное для критериев приемлемости (required).</param>
        /// <param name="description">Полное описание критериев приемлемости.</param>
        /// <param name="type">type (required).</param>
        /// <param name="comments">comments.</param>
        /// <param name="amount">Любые критерии приемлемости, требующие указания суммы или числа, например Минимальный возраст..</param>
        /// <param name="indicator">Любые критерии приемлемости, при которых значение может быть указано истинным или ложным значением. Резидент РФ - правда или ложь.</param>
        /// <param name="textual">Любые критерии приемлемости с подробным описанием.</param>
        /// <param name="period">period.</param>
        /// <param name="otherEligibilityType">otherEligibilityType.</param>
        public Eligibility(string name = default(string), string description = default(string), EligibilityType type = default(EligibilityType), Comments comments = default(Comments), string amount = default(string), bool? indicator = default(bool?), string textual = default(string), PeriodUnit period = default(PeriodUnit), OtherTypeCode otherEligibilityType = default(OtherTypeCode))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for Eligibility and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for Eligibility and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            this.Description = description;
            this.Comments = comments;
            this.Amount = amount;
            this.Indicator = indicator;
            this.Textual = textual;
            this.Period = period;
            this.OtherEligibilityType = otherEligibilityType;
        }
        
        /// <summary>
        /// Наименование, указанное для критериев приемлемости
        /// </summary>
        /// <value>Наименование, указанное для критериев приемлемости</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Полное описание критериев приемлемости
        /// </summary>
        /// <value>Полное описание критериев приемлемости</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public EligibilityType Type { get; set; }

        /// <summary>
        /// Gets or Sets Comments
        /// </summary>
        [DataMember(Name="comments", EmitDefaultValue=false)]
        public Comments Comments { get; set; }

        /// <summary>
        /// Любые критерии приемлемости, требующие указания суммы или числа, например Минимальный возраст.
        /// </summary>
        /// <value>Любые критерии приемлемости, требующие указания суммы или числа, например Минимальный возраст.</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public string Amount { get; set; }

        /// <summary>
        /// Любые критерии приемлемости, при которых значение может быть указано истинным или ложным значением. Резидент РФ - правда или ложь
        /// </summary>
        /// <value>Любые критерии приемлемости, при которых значение может быть указано истинным или ложным значением. Резидент РФ - правда или ложь</value>
        [DataMember(Name="indicator", EmitDefaultValue=false)]
        public bool? Indicator { get; set; }

        /// <summary>
        /// Любые критерии приемлемости с подробным описанием
        /// </summary>
        /// <value>Любые критерии приемлемости с подробным описанием</value>
        [DataMember(Name="textual", EmitDefaultValue=false)]
        public string Textual { get; set; }

        /// <summary>
        /// Gets or Sets Period
        /// </summary>
        [DataMember(Name="period", EmitDefaultValue=false)]
        public PeriodUnit Period { get; set; }

        /// <summary>
        /// Gets or Sets OtherEligibilityType
        /// </summary>
        [DataMember(Name="OtherEligibilityType", EmitDefaultValue=false)]
        public OtherTypeCode OtherEligibilityType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Eligibility {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Indicator: ").Append(Indicator).Append("\n");
            sb.Append("  Textual: ").Append(Textual).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("  OtherEligibilityType: ").Append(OtherEligibilityType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Eligibility);
        }

        /// <summary>
        /// Returns true if Eligibility instances are equal
        /// </summary>
        /// <param name="input">Instance of Eligibility to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Eligibility input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Comments == input.Comments ||
                    (this.Comments != null &&
                    this.Comments.Equals(input.Comments))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.Indicator == input.Indicator ||
                    (this.Indicator != null &&
                    this.Indicator.Equals(input.Indicator))
                ) && 
                (
                    this.Textual == input.Textual ||
                    (this.Textual != null &&
                    this.Textual.Equals(input.Textual))
                ) && 
                (
                    this.Period == input.Period ||
                    (this.Period != null &&
                    this.Period.Equals(input.Period))
                ) && 
                (
                    this.OtherEligibilityType == input.OtherEligibilityType ||
                    (this.OtherEligibilityType != null &&
                    this.OtherEligibilityType.Equals(input.OtherEligibilityType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Comments != null)
                    hashCode = hashCode * 59 + this.Comments.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.Indicator != null)
                    hashCode = hashCode * 59 + this.Indicator.GetHashCode();
                if (this.Textual != null)
                    hashCode = hashCode * 59 + this.Textual.GetHashCode();
                if (this.Period != null)
                    hashCode = hashCode * 59 + this.Period.GetHashCode();
                if (this.OtherEligibilityType != null)
                    hashCode = hashCode * 59 + this.OtherEligibilityType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
