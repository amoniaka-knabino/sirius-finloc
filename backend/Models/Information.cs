/* 
 * Получение публичной информации о банковских продуктах
 *
 * Содержит описываются API для Открытых банковских интерфейсов для получения публичной информации о банковских продуктах.
 *
 * OpenAPI spec version: 1.3.1
 * Contact: info@fintechru.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Информация о работе подразделения
    /// </summary>
    [DataContract]
        public partial class Information :  IEquatable<Information>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Information" /> class.
        /// </summary>
        /// <param name="segment">segment (required).</param>
        /// <param name="availability">availability.</param>
        /// <param name="contactDetails">Контактная информация.</param>
        public Information(SegmentCode segment = default(SegmentCode), Availability availability = default(Availability), List<ContactDetails> contactDetails = default(List<ContactDetails>))
        {
            // to ensure "segment" is required (not null)
            if (segment == null)
            {
                throw new InvalidDataException("segment is a required property for Information and cannot be null");
            }
            else
            {
                this.Segment = segment;
            }
            this.Availability = availability;
            this.ContactDetails = contactDetails;
        }
        
        /// <summary>
        /// Gets or Sets Segment
        /// </summary>
        [DataMember(Name="segment", EmitDefaultValue=false)]
        public SegmentCode Segment { get; set; }

        /// <summary>
        /// Gets or Sets Availability
        /// </summary>
        [DataMember(Name="Availability", EmitDefaultValue=false)]
        public Availability Availability { get; set; }

        /// <summary>
        /// Контактная информация
        /// </summary>
        /// <value>Контактная информация</value>
        [DataMember(Name="ContactDetails", EmitDefaultValue=false)]
        public List<ContactDetails> ContactDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Information {\n");
            sb.Append("  Segment: ").Append(Segment).Append("\n");
            sb.Append("  Availability: ").Append(Availability).Append("\n");
            sb.Append("  ContactDetails: ").Append(ContactDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Information);
        }

        /// <summary>
        /// Returns true if Information instances are equal
        /// </summary>
        /// <param name="input">Instance of Information to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Information input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Segment == input.Segment ||
                    (this.Segment != null &&
                    this.Segment.Equals(input.Segment))
                ) && 
                (
                    this.Availability == input.Availability ||
                    (this.Availability != null &&
                    this.Availability.Equals(input.Availability))
                ) && 
                (
                    this.ContactDetails == input.ContactDetails ||
                    this.ContactDetails != null &&
                    input.ContactDetails != null &&
                    this.ContactDetails.SequenceEqual(input.ContactDetails)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Segment != null)
                    hashCode = hashCode * 59 + this.Segment.GetHashCode();
                if (this.Availability != null)
                    hashCode = hashCode * 59 + this.Availability.GetHashCode();
                if (this.ContactDetails != null)
                    hashCode = hashCode * 59 + this.ContactDetails.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
