/* 
 * Получение публичной информации о банковских продуктах
 *
 * Содержит описываются API для Открытых банковских интерфейсов для получения публичной информации о банковских продуктах.
 *
 * OpenAPI spec version: 1.3.1
 * Contact: info@fintechru.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Подробная информация о комиссиях, сборах, пени и штрафах
    /// </summary>
    [DataContract]
        public partial class FeeChargeDetail :  IEquatable<FeeChargeDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FeeChargeDetail" /> class.
        /// </summary>
        /// <param name="feeType">feeType (required).</param>
        /// <param name="otherFeeType">otherFeeType.</param>
        /// <param name="feeAmount">feeAmount.</param>
        /// <param name="feeRate">feeRate.</param>
        /// <param name="feeRateType">feeRateType.</param>
        /// <param name="otherFeeRateType">otherFeeRateType.</param>
        /// <param name="applicationFrequency">applicationFrequency.</param>
        /// <param name="otherApplicationFrequency">otherApplicationFrequency.</param>
        /// <param name="calculationFrequency">calculationFrequency (required).</param>
        /// <param name="otherCalculationFrequency">otherCalculationFrequency.</param>
        /// <param name="feeApplicableRange">feeApplicableRange.</param>
        /// <param name="comments">comments.</param>
        public FeeChargeDetail(FeeTypeCode feeType = default(FeeTypeCode), OtherTypeCode otherFeeType = default(OtherTypeCode), string feeAmount = default(string), string feeRate = default(string), InterestRateType feeRateType = default(InterestRateType), OtherTypeCode otherFeeRateType = default(OtherTypeCode), FrequencyType applicationFrequency = default(FrequencyType), OtherTypeCode otherApplicationFrequency = default(OtherTypeCode), FrequencyType calculationFrequency = default(FrequencyType), OtherTypeCode otherCalculationFrequency = default(OtherTypeCode), FeeApplicableRange feeApplicableRange = default(FeeApplicableRange), Comments comments = default(Comments))
        {
            // to ensure "feeType" is required (not null)
            if (feeType == null)
            {
                throw new InvalidDataException("feeType is a required property for FeeChargeDetail and cannot be null");
            }
            else
            {
                this.FeeType = feeType;
            }
            // to ensure "calculationFrequency" is required (not null)
            if (calculationFrequency == null)
            {
                throw new InvalidDataException("calculationFrequency is a required property for FeeChargeDetail and cannot be null");
            }
            else
            {
                this.CalculationFrequency = calculationFrequency;
            }
            this.OtherFeeType = otherFeeType;
            this.FeeAmount = feeAmount;
            this.FeeRate = feeRate;
            this.FeeRateType = feeRateType;
            this.OtherFeeRateType = otherFeeRateType;
            this.ApplicationFrequency = applicationFrequency;
            this.OtherApplicationFrequency = otherApplicationFrequency;
            this.OtherCalculationFrequency = otherCalculationFrequency;
            this.FeeApplicableRange = feeApplicableRange;
            this.Comments = comments;
        }
        
        /// <summary>
        /// Gets or Sets FeeType
        /// </summary>
        [DataMember(Name="feeType", EmitDefaultValue=false)]
        public FeeTypeCode FeeType { get; set; }

        /// <summary>
        /// Gets or Sets OtherFeeType
        /// </summary>
        [DataMember(Name="OtherFeeType", EmitDefaultValue=false)]
        public OtherTypeCode OtherFeeType { get; set; }

        /// <summary>
        /// Gets or Sets FeeAmount
        /// </summary>
        [DataMember(Name="feeAmount", EmitDefaultValue=false)]
        public string FeeAmount { get; set; }

        /// <summary>
        /// Gets or Sets FeeRate
        /// </summary>
        [DataMember(Name="feeRate", EmitDefaultValue=false)]
        public string FeeRate { get; set; }

        /// <summary>
        /// Gets or Sets FeeRateType
        /// </summary>
        [DataMember(Name="feeRateType", EmitDefaultValue=false)]
        public InterestRateType FeeRateType { get; set; }

        /// <summary>
        /// Gets or Sets OtherFeeRateType
        /// </summary>
        [DataMember(Name="OtherFeeRateType", EmitDefaultValue=false)]
        public OtherTypeCode OtherFeeRateType { get; set; }

        /// <summary>
        /// Gets or Sets ApplicationFrequency
        /// </summary>
        [DataMember(Name="applicationFrequency", EmitDefaultValue=false)]
        public FrequencyType ApplicationFrequency { get; set; }

        /// <summary>
        /// Gets or Sets OtherApplicationFrequency
        /// </summary>
        [DataMember(Name="OtherApplicationFrequency", EmitDefaultValue=false)]
        public OtherTypeCode OtherApplicationFrequency { get; set; }

        /// <summary>
        /// Gets or Sets CalculationFrequency
        /// </summary>
        [DataMember(Name="calculationFrequency", EmitDefaultValue=false)]
        public FrequencyType CalculationFrequency { get; set; }

        /// <summary>
        /// Gets or Sets OtherCalculationFrequency
        /// </summary>
        [DataMember(Name="OtherCalculationFrequency", EmitDefaultValue=false)]
        public OtherTypeCode OtherCalculationFrequency { get; set; }

        /// <summary>
        /// Gets or Sets FeeApplicableRange
        /// </summary>
        [DataMember(Name="FeeApplicableRange", EmitDefaultValue=false)]
        public FeeApplicableRange FeeApplicableRange { get; set; }

        /// <summary>
        /// Gets or Sets Comments
        /// </summary>
        [DataMember(Name="comments", EmitDefaultValue=false)]
        public Comments Comments { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FeeChargeDetail {\n");
            sb.Append("  FeeType: ").Append(FeeType).Append("\n");
            sb.Append("  OtherFeeType: ").Append(OtherFeeType).Append("\n");
            sb.Append("  FeeAmount: ").Append(FeeAmount).Append("\n");
            sb.Append("  FeeRate: ").Append(FeeRate).Append("\n");
            sb.Append("  FeeRateType: ").Append(FeeRateType).Append("\n");
            sb.Append("  OtherFeeRateType: ").Append(OtherFeeRateType).Append("\n");
            sb.Append("  ApplicationFrequency: ").Append(ApplicationFrequency).Append("\n");
            sb.Append("  OtherApplicationFrequency: ").Append(OtherApplicationFrequency).Append("\n");
            sb.Append("  CalculationFrequency: ").Append(CalculationFrequency).Append("\n");
            sb.Append("  OtherCalculationFrequency: ").Append(OtherCalculationFrequency).Append("\n");
            sb.Append("  FeeApplicableRange: ").Append(FeeApplicableRange).Append("\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FeeChargeDetail);
        }

        /// <summary>
        /// Returns true if FeeChargeDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of FeeChargeDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FeeChargeDetail input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FeeType == input.FeeType ||
                    (this.FeeType != null &&
                    this.FeeType.Equals(input.FeeType))
                ) && 
                (
                    this.OtherFeeType == input.OtherFeeType ||
                    (this.OtherFeeType != null &&
                    this.OtherFeeType.Equals(input.OtherFeeType))
                ) && 
                (
                    this.FeeAmount == input.FeeAmount ||
                    (this.FeeAmount != null &&
                    this.FeeAmount.Equals(input.FeeAmount))
                ) && 
                (
                    this.FeeRate == input.FeeRate ||
                    (this.FeeRate != null &&
                    this.FeeRate.Equals(input.FeeRate))
                ) && 
                (
                    this.FeeRateType == input.FeeRateType ||
                    (this.FeeRateType != null &&
                    this.FeeRateType.Equals(input.FeeRateType))
                ) && 
                (
                    this.OtherFeeRateType == input.OtherFeeRateType ||
                    (this.OtherFeeRateType != null &&
                    this.OtherFeeRateType.Equals(input.OtherFeeRateType))
                ) && 
                (
                    this.ApplicationFrequency == input.ApplicationFrequency ||
                    (this.ApplicationFrequency != null &&
                    this.ApplicationFrequency.Equals(input.ApplicationFrequency))
                ) && 
                (
                    this.OtherApplicationFrequency == input.OtherApplicationFrequency ||
                    (this.OtherApplicationFrequency != null &&
                    this.OtherApplicationFrequency.Equals(input.OtherApplicationFrequency))
                ) && 
                (
                    this.CalculationFrequency == input.CalculationFrequency ||
                    (this.CalculationFrequency != null &&
                    this.CalculationFrequency.Equals(input.CalculationFrequency))
                ) && 
                (
                    this.OtherCalculationFrequency == input.OtherCalculationFrequency ||
                    (this.OtherCalculationFrequency != null &&
                    this.OtherCalculationFrequency.Equals(input.OtherCalculationFrequency))
                ) && 
                (
                    this.FeeApplicableRange == input.FeeApplicableRange ||
                    (this.FeeApplicableRange != null &&
                    this.FeeApplicableRange.Equals(input.FeeApplicableRange))
                ) && 
                (
                    this.Comments == input.Comments ||
                    (this.Comments != null &&
                    this.Comments.Equals(input.Comments))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FeeType != null)
                    hashCode = hashCode * 59 + this.FeeType.GetHashCode();
                if (this.OtherFeeType != null)
                    hashCode = hashCode * 59 + this.OtherFeeType.GetHashCode();
                if (this.FeeAmount != null)
                    hashCode = hashCode * 59 + this.FeeAmount.GetHashCode();
                if (this.FeeRate != null)
                    hashCode = hashCode * 59 + this.FeeRate.GetHashCode();
                if (this.FeeRateType != null)
                    hashCode = hashCode * 59 + this.FeeRateType.GetHashCode();
                if (this.OtherFeeRateType != null)
                    hashCode = hashCode * 59 + this.OtherFeeRateType.GetHashCode();
                if (this.ApplicationFrequency != null)
                    hashCode = hashCode * 59 + this.ApplicationFrequency.GetHashCode();
                if (this.OtherApplicationFrequency != null)
                    hashCode = hashCode * 59 + this.OtherApplicationFrequency.GetHashCode();
                if (this.CalculationFrequency != null)
                    hashCode = hashCode * 59 + this.CalculationFrequency.GetHashCode();
                if (this.OtherCalculationFrequency != null)
                    hashCode = hashCode * 59 + this.OtherCalculationFrequency.GetHashCode();
                if (this.FeeApplicableRange != null)
                    hashCode = hashCode * 59 + this.FeeApplicableRange.GetHashCode();
                if (this.Comments != null)
                    hashCode = hashCode * 59 + this.Comments.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
