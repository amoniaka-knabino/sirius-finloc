/* 
 * Получение публичной информации о банковских продуктах
 *
 * Содержит описываются API для Открытых банковских интерфейсов для получения публичной информации о банковских продуктах.
 *
 * OpenAPI spec version: 1.3.1
 * Contact: info@fintechru.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Детали комиссии и сборов за овердрафт
    /// </summary>
    [DataContract]
        public partial class OverdraftFeesCharges :  IEquatable<OverdraftFeesCharges>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OverdraftFeesCharges" /> class.
        /// </summary>
        /// <param name="overdraftFeeChargeCap">Подробная информация о любых ограничениях (минимальных / максимальных сборах), которые применяются к конкретной комиссии / сбору / пени / штрафу.</param>
        /// <param name="overdraftFeeChargeDetail">Подробная информация о комиссиях и сборах (required).</param>
        public OverdraftFeesCharges(List<FeeChargeCap> overdraftFeeChargeCap = default(List<FeeChargeCap>), List<OverdraftFeeChargeDetail> overdraftFeeChargeDetail = default(List<OverdraftFeeChargeDetail>))
        {
            // to ensure "overdraftFeeChargeDetail" is required (not null)
            if (overdraftFeeChargeDetail == null)
            {
                throw new InvalidDataException("overdraftFeeChargeDetail is a required property for OverdraftFeesCharges and cannot be null");
            }
            else
            {
                this.OverdraftFeeChargeDetail = overdraftFeeChargeDetail;
            }
            this.OverdraftFeeChargeCap = overdraftFeeChargeCap;
        }
        
        /// <summary>
        /// Подробная информация о любых ограничениях (минимальных / максимальных сборах), которые применяются к конкретной комиссии / сбору / пени / штрафу
        /// </summary>
        /// <value>Подробная информация о любых ограничениях (минимальных / максимальных сборах), которые применяются к конкретной комиссии / сбору / пени / штрафу</value>
        [DataMember(Name="OverdraftFeeChargeCap", EmitDefaultValue=false)]
        public List<FeeChargeCap> OverdraftFeeChargeCap { get; set; }

        /// <summary>
        /// Подробная информация о комиссиях и сборах
        /// </summary>
        /// <value>Подробная информация о комиссиях и сборах</value>
        [DataMember(Name="OverdraftFeeChargeDetail", EmitDefaultValue=false)]
        public List<OverdraftFeeChargeDetail> OverdraftFeeChargeDetail { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OverdraftFeesCharges {\n");
            sb.Append("  OverdraftFeeChargeCap: ").Append(OverdraftFeeChargeCap).Append("\n");
            sb.Append("  OverdraftFeeChargeDetail: ").Append(OverdraftFeeChargeDetail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OverdraftFeesCharges);
        }

        /// <summary>
        /// Returns true if OverdraftFeesCharges instances are equal
        /// </summary>
        /// <param name="input">Instance of OverdraftFeesCharges to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OverdraftFeesCharges input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OverdraftFeeChargeCap == input.OverdraftFeeChargeCap ||
                    this.OverdraftFeeChargeCap != null &&
                    input.OverdraftFeeChargeCap != null &&
                    this.OverdraftFeeChargeCap.SequenceEqual(input.OverdraftFeeChargeCap)
                ) && 
                (
                    this.OverdraftFeeChargeDetail == input.OverdraftFeeChargeDetail ||
                    this.OverdraftFeeChargeDetail != null &&
                    input.OverdraftFeeChargeDetail != null &&
                    this.OverdraftFeeChargeDetail.SequenceEqual(input.OverdraftFeeChargeDetail)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OverdraftFeeChargeCap != null)
                    hashCode = hashCode * 59 + this.OverdraftFeeChargeCap.GetHashCode();
                if (this.OverdraftFeeChargeDetail != null)
                    hashCode = hashCode * 59 + this.OverdraftFeeChargeDetail.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
