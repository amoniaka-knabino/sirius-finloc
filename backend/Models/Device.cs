/* 
 * Получение публичной информации о банковских продуктах
 *
 * Содержит описываются API для Открытых банковских интерфейсов для получения публичной информации о банковских продуктах.
 *
 * OpenAPI spec version: 1.3.1
 * Contact: info@fintechru.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Общая информация о банкомате или другом устройствае кредитной организации и привлеченных банковских платежных агентов (субагентов) о его условиях работы, предоставляемых услугах и их характеристиках, а также определении его точного местоположения
    /// </summary>
    [DataContract]
        public partial class Device :  IEquatable<Device>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Device" /> class.
        /// </summary>
        /// <param name="deviceId">Уникальный и неизменный идентификатор, используемый для идентификации ресурса devices (required).</param>
        /// <param name="operationType">Буквенные коды видов операций (required).</param>
        /// <param name="deviceType">deviceType (required).</param>
        /// <param name="nfc">Использование бесконтактной технологии (required).</param>
        /// <param name="qr">Возможность считывания QR-кодов (штрих-кодов) при совершении операций (required).</param>
        /// <param name="recirculation">Наличие функции рециркуляции банкнот.</param>
        /// <param name="baseCurrency">baseCurrency (required).</param>
        /// <param name="banknoteIn">Номинал и валюта купюр при приеме. Если массив пустой, то валюта нет может быть принята.</param>
        /// <param name="banknoteOut">Номинал и валюта купюр при выдаче. Если массив пустой, то валюты нет в наличии.</param>
        /// <param name="cards">Платёжные карты, доступные для использования на данном оборудовании (required).</param>
        /// <param name="currentStatus">currentStatus (required).</param>
        /// <param name="description">Дополнительная информация в свободной форме.</param>
        /// <param name="services">services (required).</param>
        /// <param name="availability">availability.</param>
        /// <param name="accessibilities">accessibilities.</param>
        /// <param name="paymentAgent">paymentAgent.</param>
        /// <param name="currencyExchange">Подробная информация об обмене валюты.</param>
        /// <param name="address">address (required).</param>
        /// <param name="contactDetails">contactDetails.</param>
        public Device(string deviceId = default(string), List<AllOfDeviceOperationTypeItems> operationType = default(List<AllOfDeviceOperationTypeItems>), DeviceTypeCode deviceType = default(DeviceTypeCode), bool? nfc = default(bool?), bool? qr = default(bool?), bool? recirculation = default(bool?), string baseCurrency = default(string), List<Banknote> banknoteIn = default(List<Banknote>), List<Banknote> banknoteOut = default(List<Banknote>), List<CardSchemeNameCode> cards = default(List<CardSchemeNameCode>), DeviceCurrentStatusCode currentStatus = default(DeviceCurrentStatusCode), string description = default(string), Services services = default(Services), Availability availability = default(Availability), Accessibilities accessibilities = default(Accessibilities), PaymentAgent paymentAgent = default(PaymentAgent), List<CurrencyExchange> currencyExchange = default(List<CurrencyExchange>), PostalAddressAndLocation address = default(PostalAddressAndLocation), ContactDetails contactDetails = default(ContactDetails))
        {
            // to ensure "deviceId" is required (not null)
            if (deviceId == null)
            {
                throw new InvalidDataException("deviceId is a required property for Device and cannot be null");
            }
            else
            {
                this.DeviceId = deviceId;
            }
            // to ensure "operationType" is required (not null)
            if (operationType == null)
            {
                throw new InvalidDataException("operationType is a required property for Device and cannot be null");
            }
            else
            {
                this.OperationType = operationType;
            }
            // to ensure "deviceType" is required (not null)
            if (deviceType == null)
            {
                throw new InvalidDataException("deviceType is a required property for Device and cannot be null");
            }
            else
            {
                this.DeviceType = deviceType;
            }
            // to ensure "nfc" is required (not null)
            if (nfc == null)
            {
                throw new InvalidDataException("nfc is a required property for Device and cannot be null");
            }
            else
            {
                this.Nfc = nfc;
            }
            // to ensure "qr" is required (not null)
            if (qr == null)
            {
                throw new InvalidDataException("qr is a required property for Device and cannot be null");
            }
            else
            {
                this.Qr = qr;
            }
            // to ensure "baseCurrency" is required (not null)
            if (baseCurrency == null)
            {
                throw new InvalidDataException("baseCurrency is a required property for Device and cannot be null");
            }
            else
            {
                this.BaseCurrency = baseCurrency;
            }
            // to ensure "cards" is required (not null)
            if (cards == null)
            {
                throw new InvalidDataException("cards is a required property for Device and cannot be null");
            }
            else
            {
                this.Cards = cards;
            }
            // to ensure "currentStatus" is required (not null)
            if (currentStatus == null)
            {
                throw new InvalidDataException("currentStatus is a required property for Device and cannot be null");
            }
            else
            {
                this.CurrentStatus = currentStatus;
            }
            // to ensure "services" is required (not null)
            if (services == null)
            {
                throw new InvalidDataException("services is a required property for Device and cannot be null");
            }
            else
            {
                this.Services = services;
            }
            // to ensure "address" is required (not null)
            if (address == null)
            {
                throw new InvalidDataException("address is a required property for Device and cannot be null");
            }
            else
            {
                this.Address = address;
            }
            this.Recirculation = recirculation;
            this.BanknoteIn = banknoteIn;
            this.BanknoteOut = banknoteOut;
            this.Description = description;
            this.Availability = availability;
            this.Accessibilities = accessibilities;
            this.PaymentAgent = paymentAgent;
            this.CurrencyExchange = currencyExchange;
            this.ContactDetails = contactDetails;
        }
        
        /// <summary>
        /// Уникальный и неизменный идентификатор, используемый для идентификации ресурса devices
        /// </summary>
        /// <value>Уникальный и неизменный идентификатор, используемый для идентификации ресурса devices</value>
        [DataMember(Name="deviceId", EmitDefaultValue=false)]
        public string DeviceId { get; set; }

        /// <summary>
        /// Буквенные коды видов операций
        /// </summary>
        /// <value>Буквенные коды видов операций</value>
        [DataMember(Name="operationType", EmitDefaultValue=false)]
        public List<AllOfDeviceOperationTypeItems> OperationType { get; set; }

        /// <summary>
        /// Gets or Sets DeviceType
        /// </summary>
        [DataMember(Name="deviceType", EmitDefaultValue=false)]
        public DeviceTypeCode DeviceType { get; set; }

        /// <summary>
        /// Использование бесконтактной технологии
        /// </summary>
        /// <value>Использование бесконтактной технологии</value>
        [DataMember(Name="nfc", EmitDefaultValue=false)]
        public bool? Nfc { get; set; }

        /// <summary>
        /// Возможность считывания QR-кодов (штрих-кодов) при совершении операций
        /// </summary>
        /// <value>Возможность считывания QR-кодов (штрих-кодов) при совершении операций</value>
        [DataMember(Name="qr", EmitDefaultValue=false)]
        public bool? Qr { get; set; }

        /// <summary>
        /// Наличие функции рециркуляции банкнот
        /// </summary>
        /// <value>Наличие функции рециркуляции банкнот</value>
        [DataMember(Name="recirculation", EmitDefaultValue=false)]
        public bool? Recirculation { get; set; }

        /// <summary>
        /// Gets or Sets BaseCurrency
        /// </summary>
        [DataMember(Name="baseCurrency", EmitDefaultValue=false)]
        public string BaseCurrency { get; set; }

        /// <summary>
        /// Номинал и валюта купюр при приеме. Если массив пустой, то валюта нет может быть принята
        /// </summary>
        /// <value>Номинал и валюта купюр при приеме. Если массив пустой, то валюта нет может быть принята</value>
        [DataMember(Name="BanknoteIn", EmitDefaultValue=false)]
        public List<Banknote> BanknoteIn { get; set; }

        /// <summary>
        /// Номинал и валюта купюр при выдаче. Если массив пустой, то валюты нет в наличии
        /// </summary>
        /// <value>Номинал и валюта купюр при выдаче. Если массив пустой, то валюты нет в наличии</value>
        [DataMember(Name="BanknoteOut", EmitDefaultValue=false)]
        public List<Banknote> BanknoteOut { get; set; }

        /// <summary>
        /// Платёжные карты, доступные для использования на данном оборудовании
        /// </summary>
        /// <value>Платёжные карты, доступные для использования на данном оборудовании</value>
        [DataMember(Name="cards", EmitDefaultValue=false)]
        public List<CardSchemeNameCode> Cards { get; set; }

        /// <summary>
        /// Gets or Sets CurrentStatus
        /// </summary>
        [DataMember(Name="currentStatus", EmitDefaultValue=false)]
        public DeviceCurrentStatusCode CurrentStatus { get; set; }

        /// <summary>
        /// Дополнительная информация в свободной форме
        /// </summary>
        /// <value>Дополнительная информация в свободной форме</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Services
        /// </summary>
        [DataMember(Name="Services", EmitDefaultValue=false)]
        public Services Services { get; set; }

        /// <summary>
        /// Gets or Sets Availability
        /// </summary>
        [DataMember(Name="Availability", EmitDefaultValue=false)]
        public Availability Availability { get; set; }

        /// <summary>
        /// Gets or Sets Accessibilities
        /// </summary>
        [DataMember(Name="Accessibilities", EmitDefaultValue=false)]
        public Accessibilities Accessibilities { get; set; }

        /// <summary>
        /// Gets or Sets PaymentAgent
        /// </summary>
        [DataMember(Name="PaymentAgent", EmitDefaultValue=false)]
        public PaymentAgent PaymentAgent { get; set; }

        /// <summary>
        /// Подробная информация об обмене валюты
        /// </summary>
        /// <value>Подробная информация об обмене валюты</value>
        [DataMember(Name="CurrencyExchange", EmitDefaultValue=false)]
        public List<CurrencyExchange> CurrencyExchange { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="Address", EmitDefaultValue=false)]
        public PostalAddressAndLocation Address { get; set; }

        /// <summary>
        /// Gets or Sets ContactDetails
        /// </summary>
        [DataMember(Name="ContactDetails", EmitDefaultValue=false)]
        public ContactDetails ContactDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Device {\n");
            sb.Append("  DeviceId: ").Append(DeviceId).Append("\n");
            sb.Append("  OperationType: ").Append(OperationType).Append("\n");
            sb.Append("  DeviceType: ").Append(DeviceType).Append("\n");
            sb.Append("  Nfc: ").Append(Nfc).Append("\n");
            sb.Append("  Qr: ").Append(Qr).Append("\n");
            sb.Append("  Recirculation: ").Append(Recirculation).Append("\n");
            sb.Append("  BaseCurrency: ").Append(BaseCurrency).Append("\n");
            sb.Append("  BanknoteIn: ").Append(BanknoteIn).Append("\n");
            sb.Append("  BanknoteOut: ").Append(BanknoteOut).Append("\n");
            sb.Append("  Cards: ").Append(Cards).Append("\n");
            sb.Append("  CurrentStatus: ").Append(CurrentStatus).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Services: ").Append(Services).Append("\n");
            sb.Append("  Availability: ").Append(Availability).Append("\n");
            sb.Append("  Accessibilities: ").Append(Accessibilities).Append("\n");
            sb.Append("  PaymentAgent: ").Append(PaymentAgent).Append("\n");
            sb.Append("  CurrencyExchange: ").Append(CurrencyExchange).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  ContactDetails: ").Append(ContactDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Device);
        }

        /// <summary>
        /// Returns true if Device instances are equal
        /// </summary>
        /// <param name="input">Instance of Device to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Device input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DeviceId == input.DeviceId ||
                    (this.DeviceId != null &&
                    this.DeviceId.Equals(input.DeviceId))
                ) && 
                (
                    this.OperationType == input.OperationType ||
                    this.OperationType != null &&
                    input.OperationType != null &&
                    this.OperationType.SequenceEqual(input.OperationType)
                ) && 
                (
                    this.DeviceType == input.DeviceType ||
                    (this.DeviceType != null &&
                    this.DeviceType.Equals(input.DeviceType))
                ) && 
                (
                    this.Nfc == input.Nfc ||
                    (this.Nfc != null &&
                    this.Nfc.Equals(input.Nfc))
                ) && 
                (
                    this.Qr == input.Qr ||
                    (this.Qr != null &&
                    this.Qr.Equals(input.Qr))
                ) && 
                (
                    this.Recirculation == input.Recirculation ||
                    (this.Recirculation != null &&
                    this.Recirculation.Equals(input.Recirculation))
                ) && 
                (
                    this.BaseCurrency == input.BaseCurrency ||
                    (this.BaseCurrency != null &&
                    this.BaseCurrency.Equals(input.BaseCurrency))
                ) && 
                (
                    this.BanknoteIn == input.BanknoteIn ||
                    this.BanknoteIn != null &&
                    input.BanknoteIn != null &&
                    this.BanknoteIn.SequenceEqual(input.BanknoteIn)
                ) && 
                (
                    this.BanknoteOut == input.BanknoteOut ||
                    this.BanknoteOut != null &&
                    input.BanknoteOut != null &&
                    this.BanknoteOut.SequenceEqual(input.BanknoteOut)
                ) && 
                (
                    this.Cards == input.Cards ||
                    this.Cards != null &&
                    input.Cards != null &&
                    this.Cards.SequenceEqual(input.Cards)
                ) && 
                (
                    this.CurrentStatus == input.CurrentStatus ||
                    (this.CurrentStatus != null &&
                    this.CurrentStatus.Equals(input.CurrentStatus))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Services == input.Services ||
                    (this.Services != null &&
                    this.Services.Equals(input.Services))
                ) && 
                (
                    this.Availability == input.Availability ||
                    (this.Availability != null &&
                    this.Availability.Equals(input.Availability))
                ) && 
                (
                    this.Accessibilities == input.Accessibilities ||
                    (this.Accessibilities != null &&
                    this.Accessibilities.Equals(input.Accessibilities))
                ) && 
                (
                    this.PaymentAgent == input.PaymentAgent ||
                    (this.PaymentAgent != null &&
                    this.PaymentAgent.Equals(input.PaymentAgent))
                ) && 
                (
                    this.CurrencyExchange == input.CurrencyExchange ||
                    this.CurrencyExchange != null &&
                    input.CurrencyExchange != null &&
                    this.CurrencyExchange.SequenceEqual(input.CurrencyExchange)
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.ContactDetails == input.ContactDetails ||
                    (this.ContactDetails != null &&
                    this.ContactDetails.Equals(input.ContactDetails))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DeviceId != null)
                    hashCode = hashCode * 59 + this.DeviceId.GetHashCode();
                if (this.OperationType != null)
                    hashCode = hashCode * 59 + this.OperationType.GetHashCode();
                if (this.DeviceType != null)
                    hashCode = hashCode * 59 + this.DeviceType.GetHashCode();
                if (this.Nfc != null)
                    hashCode = hashCode * 59 + this.Nfc.GetHashCode();
                if (this.Qr != null)
                    hashCode = hashCode * 59 + this.Qr.GetHashCode();
                if (this.Recirculation != null)
                    hashCode = hashCode * 59 + this.Recirculation.GetHashCode();
                if (this.BaseCurrency != null)
                    hashCode = hashCode * 59 + this.BaseCurrency.GetHashCode();
                if (this.BanknoteIn != null)
                    hashCode = hashCode * 59 + this.BanknoteIn.GetHashCode();
                if (this.BanknoteOut != null)
                    hashCode = hashCode * 59 + this.BanknoteOut.GetHashCode();
                if (this.Cards != null)
                    hashCode = hashCode * 59 + this.Cards.GetHashCode();
                if (this.CurrentStatus != null)
                    hashCode = hashCode * 59 + this.CurrentStatus.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Services != null)
                    hashCode = hashCode * 59 + this.Services.GetHashCode();
                if (this.Availability != null)
                    hashCode = hashCode * 59 + this.Availability.GetHashCode();
                if (this.Accessibilities != null)
                    hashCode = hashCode * 59 + this.Accessibilities.GetHashCode();
                if (this.PaymentAgent != null)
                    hashCode = hashCode * 59 + this.PaymentAgent.GetHashCode();
                if (this.CurrencyExchange != null)
                    hashCode = hashCode * 59 + this.CurrencyExchange.GetHashCode();
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.ContactDetails != null)
                    hashCode = hashCode * 59 + this.ContactDetails.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
