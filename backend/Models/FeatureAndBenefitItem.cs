/* 
 * Получение публичной информации о банковских продуктах
 *
 * Содержит описываются API для Открытых банковских интерфейсов для получения публичной информации о банковских продуктах.
 *
 * OpenAPI spec version: 1.3.1
 * Contact: info@fintechru.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Характеристики, связанные с программами и преимуществами
    /// </summary>
    [DataContract]
        public partial class FeatureAndBenefitItem :  IEquatable<FeatureAndBenefitItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FeatureAndBenefitItem" /> class.
        /// </summary>
        /// <param name="identification">Уникальная идентификация программы или преимущества.</param>
        /// <param name="type">Общепринятые типы программам и преимуществ в виде кода (справочные значения определяются ППД и публикуются на его портале) (required).</param>
        /// <param name="name">Наименование группы программам и преимуществ.</param>
        /// <param name="comments">comments.</param>
        /// <param name="amount">amount.</param>
        /// <param name="indicator">Индикатор true / false для конкретной функции программы / преимущества, например. Беспроцентный период (Да) или (Нет).</param>
        /// <param name="textual">Предоставляет текстовую информацию о функции / преимуществах, например Скидка 10% на билеты в кино по вторникам вечером.</param>
        /// <param name="otherType">otherType.</param>
        /// <param name="featureBenefitEligibility">Ограничение на участие в программе и преимуществах.</param>
        public FeatureAndBenefitItem(string identification = default(string), string type = default(string), string name = default(string), Comments comments = default(Comments), string amount = default(string), bool? indicator = default(bool?), string textual = default(string), OtherTypeCode otherType = default(OtherTypeCode), List<Eligibility> featureBenefitEligibility = default(List<Eligibility>))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for FeatureAndBenefitItem and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            this.Identification = identification;
            this.Name = name;
            this.Comments = comments;
            this.Amount = amount;
            this.Indicator = indicator;
            this.Textual = textual;
            this.OtherType = otherType;
            this.FeatureBenefitEligibility = featureBenefitEligibility;
        }
        
        /// <summary>
        /// Уникальная идентификация программы или преимущества
        /// </summary>
        /// <value>Уникальная идентификация программы или преимущества</value>
        [DataMember(Name="identification", EmitDefaultValue=false)]
        public string Identification { get; set; }

        /// <summary>
        /// Общепринятые типы программам и преимуществ в виде кода (справочные значения определяются ППД и публикуются на его портале)
        /// </summary>
        /// <value>Общепринятые типы программам и преимуществ в виде кода (справочные значения определяются ППД и публикуются на его портале)</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Наименование группы программам и преимуществ
        /// </summary>
        /// <value>Наименование группы программам и преимуществ</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Comments
        /// </summary>
        [DataMember(Name="comments", EmitDefaultValue=false)]
        public Comments Comments { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public string Amount { get; set; }

        /// <summary>
        /// Индикатор true / false для конкретной функции программы / преимущества, например. Беспроцентный период (Да) или (Нет)
        /// </summary>
        /// <value>Индикатор true / false для конкретной функции программы / преимущества, например. Беспроцентный период (Да) или (Нет)</value>
        [DataMember(Name="indicator", EmitDefaultValue=false)]
        public bool? Indicator { get; set; }

        /// <summary>
        /// Предоставляет текстовую информацию о функции / преимуществах, например Скидка 10% на билеты в кино по вторникам вечером
        /// </summary>
        /// <value>Предоставляет текстовую информацию о функции / преимуществах, например Скидка 10% на билеты в кино по вторникам вечером</value>
        [DataMember(Name="textual", EmitDefaultValue=false)]
        public string Textual { get; set; }

        /// <summary>
        /// Gets or Sets OtherType
        /// </summary>
        [DataMember(Name="OtherType", EmitDefaultValue=false)]
        public OtherTypeCode OtherType { get; set; }

        /// <summary>
        /// Ограничение на участие в программе и преимуществах
        /// </summary>
        /// <value>Ограничение на участие в программе и преимуществах</value>
        [DataMember(Name="FeatureBenefitEligibility", EmitDefaultValue=false)]
        public List<Eligibility> FeatureBenefitEligibility { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FeatureAndBenefitItem {\n");
            sb.Append("  Identification: ").Append(Identification).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Indicator: ").Append(Indicator).Append("\n");
            sb.Append("  Textual: ").Append(Textual).Append("\n");
            sb.Append("  OtherType: ").Append(OtherType).Append("\n");
            sb.Append("  FeatureBenefitEligibility: ").Append(FeatureBenefitEligibility).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FeatureAndBenefitItem);
        }

        /// <summary>
        /// Returns true if FeatureAndBenefitItem instances are equal
        /// </summary>
        /// <param name="input">Instance of FeatureAndBenefitItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FeatureAndBenefitItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Identification == input.Identification ||
                    (this.Identification != null &&
                    this.Identification.Equals(input.Identification))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Comments == input.Comments ||
                    (this.Comments != null &&
                    this.Comments.Equals(input.Comments))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.Indicator == input.Indicator ||
                    (this.Indicator != null &&
                    this.Indicator.Equals(input.Indicator))
                ) && 
                (
                    this.Textual == input.Textual ||
                    (this.Textual != null &&
                    this.Textual.Equals(input.Textual))
                ) && 
                (
                    this.OtherType == input.OtherType ||
                    (this.OtherType != null &&
                    this.OtherType.Equals(input.OtherType))
                ) && 
                (
                    this.FeatureBenefitEligibility == input.FeatureBenefitEligibility ||
                    this.FeatureBenefitEligibility != null &&
                    input.FeatureBenefitEligibility != null &&
                    this.FeatureBenefitEligibility.SequenceEqual(input.FeatureBenefitEligibility)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Identification != null)
                    hashCode = hashCode * 59 + this.Identification.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Comments != null)
                    hashCode = hashCode * 59 + this.Comments.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.Indicator != null)
                    hashCode = hashCode * 59 + this.Indicator.GetHashCode();
                if (this.Textual != null)
                    hashCode = hashCode * 59 + this.Textual.GetHashCode();
                if (this.OtherType != null)
                    hashCode = hashCode * 59 + this.OtherType.GetHashCode();
                if (this.FeatureBenefitEligibility != null)
                    hashCode = hashCode * 59 + this.FeatureBenefitEligibility.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
