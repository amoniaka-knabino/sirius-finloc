/* 
 * Получение публичной информации о банковских продуктах
 *
 * Содержит описываются API для Открытых банковских интерфейсов для получения публичной информации о банковских продуктах.
 *
 * OpenAPI spec version: 1.3.1
 * Contact: info@fintechru.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Определяет точное местонахождение объекта, принадлежность его к муниципальной территории
    /// </summary>
    [DataContract]
        public partial class PostalAddressAndLocation :  IEquatable<PostalAddressAndLocation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PostalAddressAndLocation" /> class.
        /// </summary>
        /// <param name="postalAddressAndAdmZone">postalAddressAndAdmZone.</param>
        /// <param name="fias">Уникальный номер адреса объекта адресации (объектов недвижимости: земельного участка, здания  (сооружения или объекта незавершенного строительства), помещения (расположенного в здании или сооружении)  в Государственном адресном реестре федеральной информационной адресной системы (ФИАС).  В случае отсутствия в ФИАС уникального номера адреса объекта адресации (при поиске такого номера для всех адресных элементов)  в поле указывается уникальный номер адресообразующего элемента для последнего элемента улично-дорожной сети. Для стран – участников ЕАЭС поле заполняется значением константы EAEU.</param>
        /// <param name="geolocation">geolocation.</param>
        public PostalAddressAndLocation(PostalAddressAndAdmZone postalAddressAndAdmZone = default(PostalAddressAndAdmZone), string fias = default(string), Geolocation geolocation = default(Geolocation))
        {
            this.PostalAddressAndAdmZone = postalAddressAndAdmZone;
            this.Fias = fias;
            this.Geolocation = geolocation;
        }
        
        /// <summary>
        /// Gets or Sets PostalAddressAndAdmZone
        /// </summary>
        [DataMember(Name="PostalAddressAndAdmZone", EmitDefaultValue=false)]
        public PostalAddressAndAdmZone PostalAddressAndAdmZone { get; set; }

        /// <summary>
        /// Уникальный номер адреса объекта адресации (объектов недвижимости: земельного участка, здания  (сооружения или объекта незавершенного строительства), помещения (расположенного в здании или сооружении)  в Государственном адресном реестре федеральной информационной адресной системы (ФИАС).  В случае отсутствия в ФИАС уникального номера адреса объекта адресации (при поиске такого номера для всех адресных элементов)  в поле указывается уникальный номер адресообразующего элемента для последнего элемента улично-дорожной сети. Для стран – участников ЕАЭС поле заполняется значением константы EAEU
        /// </summary>
        /// <value>Уникальный номер адреса объекта адресации (объектов недвижимости: земельного участка, здания  (сооружения или объекта незавершенного строительства), помещения (расположенного в здании или сооружении)  в Государственном адресном реестре федеральной информационной адресной системы (ФИАС).  В случае отсутствия в ФИАС уникального номера адреса объекта адресации (при поиске такого номера для всех адресных элементов)  в поле указывается уникальный номер адресообразующего элемента для последнего элемента улично-дорожной сети. Для стран – участников ЕАЭС поле заполняется значением константы EAEU</value>
        [DataMember(Name="fias", EmitDefaultValue=false)]
        public string Fias { get; set; }

        /// <summary>
        /// Gets or Sets Geolocation
        /// </summary>
        [DataMember(Name="Geolocation", EmitDefaultValue=false)]
        public Geolocation Geolocation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PostalAddressAndLocation {\n");
            sb.Append("  PostalAddressAndAdmZone: ").Append(PostalAddressAndAdmZone).Append("\n");
            sb.Append("  Fias: ").Append(Fias).Append("\n");
            sb.Append("  Geolocation: ").Append(Geolocation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PostalAddressAndLocation);
        }

        /// <summary>
        /// Returns true if PostalAddressAndLocation instances are equal
        /// </summary>
        /// <param name="input">Instance of PostalAddressAndLocation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PostalAddressAndLocation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PostalAddressAndAdmZone == input.PostalAddressAndAdmZone ||
                    (this.PostalAddressAndAdmZone != null &&
                    this.PostalAddressAndAdmZone.Equals(input.PostalAddressAndAdmZone))
                ) && 
                (
                    this.Fias == input.Fias ||
                    (this.Fias != null &&
                    this.Fias.Equals(input.Fias))
                ) && 
                (
                    this.Geolocation == input.Geolocation ||
                    (this.Geolocation != null &&
                    this.Geolocation.Equals(input.Geolocation))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PostalAddressAndAdmZone != null)
                    hashCode = hashCode * 59 + this.PostalAddressAndAdmZone.GetHashCode();
                if (this.Fias != null)
                    hashCode = hashCode * 59 + this.Fias.GetHashCode();
                if (this.Geolocation != null)
                    hashCode = hashCode * 59 + this.Geolocation.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
