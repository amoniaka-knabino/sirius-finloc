/* 
 * Получение публичной информации о банковских продуктах
 *
 * Содержит описываются API для Открытых банковских интерфейсов для получения публичной информации о банковских продуктах.
 *
 * OpenAPI spec version: 1.3.1
 * Contact: info@fintechru.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Подробная информация об обмене валюты
    /// </summary>
    [DataContract]
        public partial class CurrencyExchange :  IEquatable<CurrencyExchange>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CurrencyExchange" /> class.
        /// </summary>
        /// <param name="exchangeType">exchangeType (required).</param>
        /// <param name="sourceCurrency">sourceCurrency (required).</param>
        /// <param name="targetCurrency">targetCurrency (required).</param>
        /// <param name="scaleCurrency">Количество единиц targetCurrency, для которого установлен курс обмена (required).</param>
        /// <param name="exchangeRate">Коэффициент, используемый для перевода суммы из одной валюты в другую. Это отражает цену, по которой одна валюта была куплена за другую валюту (required).</param>
        /// <param name="fee">Комиссия за операцию обмена валюты.</param>
        /// <param name="amountMin">Минимальная сумма для обмена.</param>
        /// <param name="amountMax">Максимальная сумма для обмена.</param>
        /// <param name="direction">direction (required).</param>
        /// <param name="quotationDate">quotationDate.</param>
        /// <param name="updateDateTime">updateDateTime.</param>
        public CurrencyExchange(ExchangeTypeCode exchangeType = default(ExchangeTypeCode), string sourceCurrency = default(string), string targetCurrency = default(string), int? scaleCurrency = default(int?), decimal? exchangeRate = default(decimal?), float? fee = default(float?), float? amountMin = default(float?), float? amountMax = default(float?), CurrencyExchangeDirection direction = default(CurrencyExchangeDirection), DateTime? quotationDate = default(DateTime?), DateTime? updateDateTime = default(DateTime?))
        {
            // to ensure "exchangeType" is required (not null)
            if (exchangeType == null)
            {
                throw new InvalidDataException("exchangeType is a required property for CurrencyExchange and cannot be null");
            }
            else
            {
                this.ExchangeType = exchangeType;
            }
            // to ensure "sourceCurrency" is required (not null)
            if (sourceCurrency == null)
            {
                throw new InvalidDataException("sourceCurrency is a required property for CurrencyExchange and cannot be null");
            }
            else
            {
                this.SourceCurrency = sourceCurrency;
            }
            // to ensure "targetCurrency" is required (not null)
            if (targetCurrency == null)
            {
                throw new InvalidDataException("targetCurrency is a required property for CurrencyExchange and cannot be null");
            }
            else
            {
                this.TargetCurrency = targetCurrency;
            }
            // to ensure "scaleCurrency" is required (not null)
            if (scaleCurrency == null)
            {
                throw new InvalidDataException("scaleCurrency is a required property for CurrencyExchange and cannot be null");
            }
            else
            {
                this.ScaleCurrency = scaleCurrency;
            }
            // to ensure "exchangeRate" is required (not null)
            if (exchangeRate == null)
            {
                throw new InvalidDataException("exchangeRate is a required property for CurrencyExchange and cannot be null");
            }
            else
            {
                this.ExchangeRate = exchangeRate;
            }
            // to ensure "direction" is required (not null)
            if (direction == null)
            {
                throw new InvalidDataException("direction is a required property for CurrencyExchange and cannot be null");
            }
            else
            {
                this.Direction = direction;
            }
            this.Fee = fee;
            this.AmountMin = amountMin;
            this.AmountMax = amountMax;
            this.QuotationDate = quotationDate;
            this.UpdateDateTime = updateDateTime;
        }
        
        /// <summary>
        /// Gets or Sets ExchangeType
        /// </summary>
        [DataMember(Name="exchangeType", EmitDefaultValue=false)]
        public ExchangeTypeCode ExchangeType { get; set; }

        /// <summary>
        /// Gets or Sets SourceCurrency
        /// </summary>
        [DataMember(Name="sourceCurrency", EmitDefaultValue=false)]
        public string SourceCurrency { get; set; }

        /// <summary>
        /// Gets or Sets TargetCurrency
        /// </summary>
        [DataMember(Name="targetCurrency", EmitDefaultValue=false)]
        public string TargetCurrency { get; set; }

        /// <summary>
        /// Количество единиц targetCurrency, для которого установлен курс обмена
        /// </summary>
        /// <value>Количество единиц targetCurrency, для которого установлен курс обмена</value>
        [DataMember(Name="scaleCurrency", EmitDefaultValue=false)]
        public int? ScaleCurrency { get; set; }

        /// <summary>
        /// Коэффициент, используемый для перевода суммы из одной валюты в другую. Это отражает цену, по которой одна валюта была куплена за другую валюту
        /// </summary>
        /// <value>Коэффициент, используемый для перевода суммы из одной валюты в другую. Это отражает цену, по которой одна валюта была куплена за другую валюту</value>
        [DataMember(Name="exchangeRate", EmitDefaultValue=false)]
        public decimal? ExchangeRate { get; set; }

        /// <summary>
        /// Комиссия за операцию обмена валюты
        /// </summary>
        /// <value>Комиссия за операцию обмена валюты</value>
        [DataMember(Name="fee", EmitDefaultValue=false)]
        public float? Fee { get; set; }

        /// <summary>
        /// Минимальная сумма для обмена
        /// </summary>
        /// <value>Минимальная сумма для обмена</value>
        [DataMember(Name="amountMin", EmitDefaultValue=false)]
        public float? AmountMin { get; set; }

        /// <summary>
        /// Максимальная сумма для обмена
        /// </summary>
        /// <value>Максимальная сумма для обмена</value>
        [DataMember(Name="amountMax", EmitDefaultValue=false)]
        public float? AmountMax { get; set; }

        /// <summary>
        /// Gets or Sets Direction
        /// </summary>
        [DataMember(Name="direction", EmitDefaultValue=false)]
        public CurrencyExchangeDirection Direction { get; set; }

        /// <summary>
        /// Gets or Sets QuotationDate
        /// </summary>
        [DataMember(Name="quotationDate", EmitDefaultValue=false)]
        public DateTime? QuotationDate { get; set; }

        /// <summary>
        /// Gets or Sets UpdateDateTime
        /// </summary>
        [DataMember(Name="updateDateTime", EmitDefaultValue=false)]
        public DateTime? UpdateDateTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CurrencyExchange {\n");
            sb.Append("  ExchangeType: ").Append(ExchangeType).Append("\n");
            sb.Append("  SourceCurrency: ").Append(SourceCurrency).Append("\n");
            sb.Append("  TargetCurrency: ").Append(TargetCurrency).Append("\n");
            sb.Append("  ScaleCurrency: ").Append(ScaleCurrency).Append("\n");
            sb.Append("  ExchangeRate: ").Append(ExchangeRate).Append("\n");
            sb.Append("  Fee: ").Append(Fee).Append("\n");
            sb.Append("  AmountMin: ").Append(AmountMin).Append("\n");
            sb.Append("  AmountMax: ").Append(AmountMax).Append("\n");
            sb.Append("  Direction: ").Append(Direction).Append("\n");
            sb.Append("  QuotationDate: ").Append(QuotationDate).Append("\n");
            sb.Append("  UpdateDateTime: ").Append(UpdateDateTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CurrencyExchange);
        }

        /// <summary>
        /// Returns true if CurrencyExchange instances are equal
        /// </summary>
        /// <param name="input">Instance of CurrencyExchange to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CurrencyExchange input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ExchangeType == input.ExchangeType ||
                    (this.ExchangeType != null &&
                    this.ExchangeType.Equals(input.ExchangeType))
                ) && 
                (
                    this.SourceCurrency == input.SourceCurrency ||
                    (this.SourceCurrency != null &&
                    this.SourceCurrency.Equals(input.SourceCurrency))
                ) && 
                (
                    this.TargetCurrency == input.TargetCurrency ||
                    (this.TargetCurrency != null &&
                    this.TargetCurrency.Equals(input.TargetCurrency))
                ) && 
                (
                    this.ScaleCurrency == input.ScaleCurrency ||
                    (this.ScaleCurrency != null &&
                    this.ScaleCurrency.Equals(input.ScaleCurrency))
                ) && 
                (
                    this.ExchangeRate == input.ExchangeRate ||
                    (this.ExchangeRate != null &&
                    this.ExchangeRate.Equals(input.ExchangeRate))
                ) && 
                (
                    this.Fee == input.Fee ||
                    (this.Fee != null &&
                    this.Fee.Equals(input.Fee))
                ) && 
                (
                    this.AmountMin == input.AmountMin ||
                    (this.AmountMin != null &&
                    this.AmountMin.Equals(input.AmountMin))
                ) && 
                (
                    this.AmountMax == input.AmountMax ||
                    (this.AmountMax != null &&
                    this.AmountMax.Equals(input.AmountMax))
                ) && 
                (
                    this.Direction == input.Direction ||
                    (this.Direction != null &&
                    this.Direction.Equals(input.Direction))
                ) && 
                (
                    this.QuotationDate == input.QuotationDate ||
                    (this.QuotationDate != null &&
                    this.QuotationDate.Equals(input.QuotationDate))
                ) && 
                (
                    this.UpdateDateTime == input.UpdateDateTime ||
                    (this.UpdateDateTime != null &&
                    this.UpdateDateTime.Equals(input.UpdateDateTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ExchangeType != null)
                    hashCode = hashCode * 59 + this.ExchangeType.GetHashCode();
                if (this.SourceCurrency != null)
                    hashCode = hashCode * 59 + this.SourceCurrency.GetHashCode();
                if (this.TargetCurrency != null)
                    hashCode = hashCode * 59 + this.TargetCurrency.GetHashCode();
                if (this.ScaleCurrency != null)
                    hashCode = hashCode * 59 + this.ScaleCurrency.GetHashCode();
                if (this.ExchangeRate != null)
                    hashCode = hashCode * 59 + this.ExchangeRate.GetHashCode();
                if (this.Fee != null)
                    hashCode = hashCode * 59 + this.Fee.GetHashCode();
                if (this.AmountMin != null)
                    hashCode = hashCode * 59 + this.AmountMin.GetHashCode();
                if (this.AmountMax != null)
                    hashCode = hashCode * 59 + this.AmountMax.GetHashCode();
                if (this.Direction != null)
                    hashCode = hashCode * 59 + this.Direction.GetHashCode();
                if (this.QuotationDate != null)
                    hashCode = hashCode * 59 + this.QuotationDate.GetHashCode();
                if (this.UpdateDateTime != null)
                    hashCode = hashCode * 59 + this.UpdateDateTime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
