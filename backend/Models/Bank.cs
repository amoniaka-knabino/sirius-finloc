/* 
 * Получение публичной информации о банковских продуктах
 *
 * Содержит описываются API для Открытых банковских интерфейсов для получения публичной информации о банковских продуктах.
 *
 * OpenAPI spec version: 1.3.1
 * Contact: info@fintechru.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Общая информация о кредитной организации, служащая для ее идентификации и позволяющая определить базовые URL для предоставления публичной информации. Используется  в реестре поставщиков публичной информации  Среды Открытых банковских интерфейсов.
    /// </summary>
    [DataContract]
        public partial class Bank :  IEquatable<Bank>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Bank" /> class.
        /// </summary>
        /// <param name="bankId">Уникальный и неизменный идентификатор, используемый для идентификации ресурса &#x27;banks&#x27; (ресурс кредитной организации) (required).</param>
        /// <param name="bicfi">bicfi.</param>
        /// <param name="bic">bic.</param>
        /// <param name="clearingSystemMemberId">Идентификатор участника в платежной системе..</param>
        /// <param name="baseUrl">Базовый URL кредитной организации (required).</param>
        /// <param name="bankName">Наименование кредитной организации. (required).</param>
        /// <param name="bankNameEng">Наименование кредитной организации на английском языке..</param>
        /// <param name="shortBankName">Сокращенное наименование кредитной организации..</param>
        /// <param name="bankDescription">Детальное описание кредитной организации..</param>
        /// <param name="legalEntityId">Код идентификации юридических лиц LEI..</param>
        /// <param name="postalAddress">postalAddress (required).</param>
        public Bank(string bankId = default(string), string bicfi = default(string), string bic = default(string), string clearingSystemMemberId = default(string), string baseUrl = default(string), string bankName = default(string), string bankNameEng = default(string), string shortBankName = default(string), string bankDescription = default(string), string legalEntityId = default(string), PostalAddress postalAddress = default(PostalAddress))
        {
            // to ensure "bankId" is required (not null)
            if (bankId == null)
            {
                throw new InvalidDataException("bankId is a required property for Bank and cannot be null");
            }
            else
            {
                this.BankId = bankId;
            }
            // to ensure "baseUrl" is required (not null)
            if (baseUrl == null)
            {
                throw new InvalidDataException("baseUrl is a required property for Bank and cannot be null");
            }
            else
            {
                this.BaseUrl = baseUrl;
            }
            // to ensure "bankName" is required (not null)
            if (bankName == null)
            {
                throw new InvalidDataException("bankName is a required property for Bank and cannot be null");
            }
            else
            {
                this.BankName = bankName;
            }
            // to ensure "postalAddress" is required (not null)
            if (postalAddress == null)
            {
                throw new InvalidDataException("postalAddress is a required property for Bank and cannot be null");
            }
            else
            {
                this.PostalAddress = postalAddress;
            }
            this.Bicfi = bicfi;
            this.Bic = bic;
            this.ClearingSystemMemberId = clearingSystemMemberId;
            this.BankNameEng = bankNameEng;
            this.ShortBankName = shortBankName;
            this.BankDescription = bankDescription;
            this.LegalEntityId = legalEntityId;
        }
        
        /// <summary>
        /// Уникальный и неизменный идентификатор, используемый для идентификации ресурса &#x27;banks&#x27; (ресурс кредитной организации)
        /// </summary>
        /// <value>Уникальный и неизменный идентификатор, используемый для идентификации ресурса &#x27;banks&#x27; (ресурс кредитной организации)</value>
        [DataMember(Name="bankId", EmitDefaultValue=false)]
        public string BankId { get; set; }

        /// <summary>
        /// Gets or Sets Bicfi
        /// </summary>
        [DataMember(Name="bicfi", EmitDefaultValue=false)]
        public string Bicfi { get; set; }

        /// <summary>
        /// Gets or Sets Bic
        /// </summary>
        [DataMember(Name="bic", EmitDefaultValue=false)]
        public string Bic { get; set; }

        /// <summary>
        /// Идентификатор участника в платежной системе.
        /// </summary>
        /// <value>Идентификатор участника в платежной системе.</value>
        [DataMember(Name="clearingSystemMemberId", EmitDefaultValue=false)]
        public string ClearingSystemMemberId { get; set; }

        /// <summary>
        /// Базовый URL кредитной организации
        /// </summary>
        /// <value>Базовый URL кредитной организации</value>
        [DataMember(Name="baseUrl", EmitDefaultValue=false)]
        public string BaseUrl { get; set; }

        /// <summary>
        /// Наименование кредитной организации.
        /// </summary>
        /// <value>Наименование кредитной организации.</value>
        [DataMember(Name="bankName", EmitDefaultValue=false)]
        public string BankName { get; set; }

        /// <summary>
        /// Наименование кредитной организации на английском языке.
        /// </summary>
        /// <value>Наименование кредитной организации на английском языке.</value>
        [DataMember(Name="bankNameEng", EmitDefaultValue=false)]
        public string BankNameEng { get; set; }

        /// <summary>
        /// Сокращенное наименование кредитной организации.
        /// </summary>
        /// <value>Сокращенное наименование кредитной организации.</value>
        [DataMember(Name="shortBankName", EmitDefaultValue=false)]
        public string ShortBankName { get; set; }

        /// <summary>
        /// Детальное описание кредитной организации.
        /// </summary>
        /// <value>Детальное описание кредитной организации.</value>
        [DataMember(Name="bankDescription", EmitDefaultValue=false)]
        public string BankDescription { get; set; }

        /// <summary>
        /// Код идентификации юридических лиц LEI.
        /// </summary>
        /// <value>Код идентификации юридических лиц LEI.</value>
        [DataMember(Name="legalEntityId", EmitDefaultValue=false)]
        public string LegalEntityId { get; set; }

        /// <summary>
        /// Gets or Sets PostalAddress
        /// </summary>
        [DataMember(Name="PostalAddress", EmitDefaultValue=false)]
        public PostalAddress PostalAddress { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Bank {\n");
            sb.Append("  BankId: ").Append(BankId).Append("\n");
            sb.Append("  Bicfi: ").Append(Bicfi).Append("\n");
            sb.Append("  Bic: ").Append(Bic).Append("\n");
            sb.Append("  ClearingSystemMemberId: ").Append(ClearingSystemMemberId).Append("\n");
            sb.Append("  BaseUrl: ").Append(BaseUrl).Append("\n");
            sb.Append("  BankName: ").Append(BankName).Append("\n");
            sb.Append("  BankNameEng: ").Append(BankNameEng).Append("\n");
            sb.Append("  ShortBankName: ").Append(ShortBankName).Append("\n");
            sb.Append("  BankDescription: ").Append(BankDescription).Append("\n");
            sb.Append("  LegalEntityId: ").Append(LegalEntityId).Append("\n");
            sb.Append("  PostalAddress: ").Append(PostalAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Bank);
        }

        /// <summary>
        /// Returns true if Bank instances are equal
        /// </summary>
        /// <param name="input">Instance of Bank to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Bank input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BankId == input.BankId ||
                    (this.BankId != null &&
                    this.BankId.Equals(input.BankId))
                ) && 
                (
                    this.Bicfi == input.Bicfi ||
                    (this.Bicfi != null &&
                    this.Bicfi.Equals(input.Bicfi))
                ) && 
                (
                    this.Bic == input.Bic ||
                    (this.Bic != null &&
                    this.Bic.Equals(input.Bic))
                ) && 
                (
                    this.ClearingSystemMemberId == input.ClearingSystemMemberId ||
                    (this.ClearingSystemMemberId != null &&
                    this.ClearingSystemMemberId.Equals(input.ClearingSystemMemberId))
                ) && 
                (
                    this.BaseUrl == input.BaseUrl ||
                    (this.BaseUrl != null &&
                    this.BaseUrl.Equals(input.BaseUrl))
                ) && 
                (
                    this.BankName == input.BankName ||
                    (this.BankName != null &&
                    this.BankName.Equals(input.BankName))
                ) && 
                (
                    this.BankNameEng == input.BankNameEng ||
                    (this.BankNameEng != null &&
                    this.BankNameEng.Equals(input.BankNameEng))
                ) && 
                (
                    this.ShortBankName == input.ShortBankName ||
                    (this.ShortBankName != null &&
                    this.ShortBankName.Equals(input.ShortBankName))
                ) && 
                (
                    this.BankDescription == input.BankDescription ||
                    (this.BankDescription != null &&
                    this.BankDescription.Equals(input.BankDescription))
                ) && 
                (
                    this.LegalEntityId == input.LegalEntityId ||
                    (this.LegalEntityId != null &&
                    this.LegalEntityId.Equals(input.LegalEntityId))
                ) && 
                (
                    this.PostalAddress == input.PostalAddress ||
                    (this.PostalAddress != null &&
                    this.PostalAddress.Equals(input.PostalAddress))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BankId != null)
                    hashCode = hashCode * 59 + this.BankId.GetHashCode();
                if (this.Bicfi != null)
                    hashCode = hashCode * 59 + this.Bicfi.GetHashCode();
                if (this.Bic != null)
                    hashCode = hashCode * 59 + this.Bic.GetHashCode();
                if (this.ClearingSystemMemberId != null)
                    hashCode = hashCode * 59 + this.ClearingSystemMemberId.GetHashCode();
                if (this.BaseUrl != null)
                    hashCode = hashCode * 59 + this.BaseUrl.GetHashCode();
                if (this.BankName != null)
                    hashCode = hashCode * 59 + this.BankName.GetHashCode();
                if (this.BankNameEng != null)
                    hashCode = hashCode * 59 + this.BankNameEng.GetHashCode();
                if (this.ShortBankName != null)
                    hashCode = hashCode * 59 + this.ShortBankName.GetHashCode();
                if (this.BankDescription != null)
                    hashCode = hashCode * 59 + this.BankDescription.GetHashCode();
                if (this.LegalEntityId != null)
                    hashCode = hashCode * 59 + this.LegalEntityId.GetHashCode();
                if (this.PostalAddress != null)
                    hashCode = hashCode * 59 + this.PostalAddress.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
