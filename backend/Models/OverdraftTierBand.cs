/* 
 * Получение публичной информации о банковских продуктах
 *
 * Содержит описываются API для Открытых банковских интерфейсов для получения публичной информации о банковских продуктах.
 *
 * OpenAPI spec version: 1.3.1
 * Contact: info@fintechru.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Подробная информация об уровнях процентной ставки по овердрафту
    /// </summary>
    [DataContract]
        public partial class OverdraftTierBand :  IEquatable<OverdraftTierBand>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OverdraftTierBand" /> class.
        /// </summary>
        /// <param name="eAR">eAR.</param>
        /// <param name="comments">comments.</param>
        /// <param name="identification">Уникальное и однозначное определение уровня или диапазона процентных ставок.</param>
        /// <param name="tierCurrency">tierCurrency.</param>
        /// <param name="tierValueMin">tierValueMin (required).</param>
        /// <param name="tierValueMax">tierValueMax.</param>
        /// <param name="agreementLengthMin">Минимальное значение диапазона соглашения об овердрафте.</param>
        /// <param name="agreementLengthMax">Максимальное значение диапазона соглашения об овердрафте.</param>
        /// <param name="agreementPeriod">agreementPeriod.</param>
        /// <param name="overdraftInterestChargingCoverage">overdraftInterestChargingCoverage.</param>
        /// <param name="bankGuaranteedIndicator">Указывает, гарантированно ли заявленная ставка овердрафта будет предложена заемщику банком, например если это часть государственной программы или может ли ставка варьироваться в зависимости от обстоятельств заявителя.</param>
        /// <param name="overdraftFeesCharges">Детали комиссии и сборов за овердрафт.</param>
        public OverdraftTierBand(string eAR = default(string), Comments comments = default(Comments), string identification = default(string), string tierCurrency = default(string), string tierValueMin = default(string), string tierValueMax = default(string), int? agreementLengthMin = default(int?), int? agreementLengthMax = default(int?), PeriodUnit agreementPeriod = default(PeriodUnit), TierBandMethod overdraftInterestChargingCoverage = default(TierBandMethod), bool? bankGuaranteedIndicator = default(bool?), List<OverdraftFeesCharges> overdraftFeesCharges = default(List<OverdraftFeesCharges>))
        {
            // to ensure "tierValueMin" is required (not null)
            if (tierValueMin == null)
            {
                throw new InvalidDataException("tierValueMin is a required property for OverdraftTierBand and cannot be null");
            }
            else
            {
                this.TierValueMin = tierValueMin;
            }
            this.EAR = eAR;
            this.Comments = comments;
            this.Identification = identification;
            this.TierCurrency = tierCurrency;
            this.TierValueMax = tierValueMax;
            this.AgreementLengthMin = agreementLengthMin;
            this.AgreementLengthMax = agreementLengthMax;
            this.AgreementPeriod = agreementPeriod;
            this.OverdraftInterestChargingCoverage = overdraftInterestChargingCoverage;
            this.BankGuaranteedIndicator = bankGuaranteedIndicator;
            this.OverdraftFeesCharges = overdraftFeesCharges;
        }
        
        /// <summary>
        /// Gets or Sets EAR
        /// </summary>
        [DataMember(Name="EAR", EmitDefaultValue=false)]
        public string EAR { get; set; }

        /// <summary>
        /// Gets or Sets Comments
        /// </summary>
        [DataMember(Name="comments", EmitDefaultValue=false)]
        public Comments Comments { get; set; }

        /// <summary>
        /// Уникальное и однозначное определение уровня или диапазона процентных ставок
        /// </summary>
        /// <value>Уникальное и однозначное определение уровня или диапазона процентных ставок</value>
        [DataMember(Name="identification", EmitDefaultValue=false)]
        public string Identification { get; set; }

        /// <summary>
        /// Gets or Sets TierCurrency
        /// </summary>
        [DataMember(Name="tierCurrency", EmitDefaultValue=false)]
        public string TierCurrency { get; set; }

        /// <summary>
        /// Gets or Sets TierValueMin
        /// </summary>
        [DataMember(Name="tierValueMin", EmitDefaultValue=false)]
        public string TierValueMin { get; set; }

        /// <summary>
        /// Gets or Sets TierValueMax
        /// </summary>
        [DataMember(Name="tierValueMax", EmitDefaultValue=false)]
        public string TierValueMax { get; set; }

        /// <summary>
        /// Минимальное значение диапазона соглашения об овердрафте
        /// </summary>
        /// <value>Минимальное значение диапазона соглашения об овердрафте</value>
        [DataMember(Name="agreementLengthMin", EmitDefaultValue=false)]
        public int? AgreementLengthMin { get; set; }

        /// <summary>
        /// Максимальное значение диапазона соглашения об овердрафте
        /// </summary>
        /// <value>Максимальное значение диапазона соглашения об овердрафте</value>
        [DataMember(Name="agreementLengthMax", EmitDefaultValue=false)]
        public int? AgreementLengthMax { get; set; }

        /// <summary>
        /// Gets or Sets AgreementPeriod
        /// </summary>
        [DataMember(Name="agreementPeriod", EmitDefaultValue=false)]
        public PeriodUnit AgreementPeriod { get; set; }

        /// <summary>
        /// Gets or Sets OverdraftInterestChargingCoverage
        /// </summary>
        [DataMember(Name="overdraftInterestChargingCoverage", EmitDefaultValue=false)]
        public TierBandMethod OverdraftInterestChargingCoverage { get; set; }

        /// <summary>
        /// Указывает, гарантированно ли заявленная ставка овердрафта будет предложена заемщику банком, например если это часть государственной программы или может ли ставка варьироваться в зависимости от обстоятельств заявителя
        /// </summary>
        /// <value>Указывает, гарантированно ли заявленная ставка овердрафта будет предложена заемщику банком, например если это часть государственной программы или может ли ставка варьироваться в зависимости от обстоятельств заявителя</value>
        [DataMember(Name="bankGuaranteedIndicator", EmitDefaultValue=false)]
        public bool? BankGuaranteedIndicator { get; set; }

        /// <summary>
        /// Детали комиссии и сборов за овердрафт
        /// </summary>
        /// <value>Детали комиссии и сборов за овердрафт</value>
        [DataMember(Name="OverdraftFeesCharges", EmitDefaultValue=false)]
        public List<OverdraftFeesCharges> OverdraftFeesCharges { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OverdraftTierBand {\n");
            sb.Append("  EAR: ").Append(EAR).Append("\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("  Identification: ").Append(Identification).Append("\n");
            sb.Append("  TierCurrency: ").Append(TierCurrency).Append("\n");
            sb.Append("  TierValueMin: ").Append(TierValueMin).Append("\n");
            sb.Append("  TierValueMax: ").Append(TierValueMax).Append("\n");
            sb.Append("  AgreementLengthMin: ").Append(AgreementLengthMin).Append("\n");
            sb.Append("  AgreementLengthMax: ").Append(AgreementLengthMax).Append("\n");
            sb.Append("  AgreementPeriod: ").Append(AgreementPeriod).Append("\n");
            sb.Append("  OverdraftInterestChargingCoverage: ").Append(OverdraftInterestChargingCoverage).Append("\n");
            sb.Append("  BankGuaranteedIndicator: ").Append(BankGuaranteedIndicator).Append("\n");
            sb.Append("  OverdraftFeesCharges: ").Append(OverdraftFeesCharges).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OverdraftTierBand);
        }

        /// <summary>
        /// Returns true if OverdraftTierBand instances are equal
        /// </summary>
        /// <param name="input">Instance of OverdraftTierBand to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OverdraftTierBand input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EAR == input.EAR ||
                    (this.EAR != null &&
                    this.EAR.Equals(input.EAR))
                ) && 
                (
                    this.Comments == input.Comments ||
                    (this.Comments != null &&
                    this.Comments.Equals(input.Comments))
                ) && 
                (
                    this.Identification == input.Identification ||
                    (this.Identification != null &&
                    this.Identification.Equals(input.Identification))
                ) && 
                (
                    this.TierCurrency == input.TierCurrency ||
                    (this.TierCurrency != null &&
                    this.TierCurrency.Equals(input.TierCurrency))
                ) && 
                (
                    this.TierValueMin == input.TierValueMin ||
                    (this.TierValueMin != null &&
                    this.TierValueMin.Equals(input.TierValueMin))
                ) && 
                (
                    this.TierValueMax == input.TierValueMax ||
                    (this.TierValueMax != null &&
                    this.TierValueMax.Equals(input.TierValueMax))
                ) && 
                (
                    this.AgreementLengthMin == input.AgreementLengthMin ||
                    (this.AgreementLengthMin != null &&
                    this.AgreementLengthMin.Equals(input.AgreementLengthMin))
                ) && 
                (
                    this.AgreementLengthMax == input.AgreementLengthMax ||
                    (this.AgreementLengthMax != null &&
                    this.AgreementLengthMax.Equals(input.AgreementLengthMax))
                ) && 
                (
                    this.AgreementPeriod == input.AgreementPeriod ||
                    (this.AgreementPeriod != null &&
                    this.AgreementPeriod.Equals(input.AgreementPeriod))
                ) && 
                (
                    this.OverdraftInterestChargingCoverage == input.OverdraftInterestChargingCoverage ||
                    (this.OverdraftInterestChargingCoverage != null &&
                    this.OverdraftInterestChargingCoverage.Equals(input.OverdraftInterestChargingCoverage))
                ) && 
                (
                    this.BankGuaranteedIndicator == input.BankGuaranteedIndicator ||
                    (this.BankGuaranteedIndicator != null &&
                    this.BankGuaranteedIndicator.Equals(input.BankGuaranteedIndicator))
                ) && 
                (
                    this.OverdraftFeesCharges == input.OverdraftFeesCharges ||
                    this.OverdraftFeesCharges != null &&
                    input.OverdraftFeesCharges != null &&
                    this.OverdraftFeesCharges.SequenceEqual(input.OverdraftFeesCharges)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EAR != null)
                    hashCode = hashCode * 59 + this.EAR.GetHashCode();
                if (this.Comments != null)
                    hashCode = hashCode * 59 + this.Comments.GetHashCode();
                if (this.Identification != null)
                    hashCode = hashCode * 59 + this.Identification.GetHashCode();
                if (this.TierCurrency != null)
                    hashCode = hashCode * 59 + this.TierCurrency.GetHashCode();
                if (this.TierValueMin != null)
                    hashCode = hashCode * 59 + this.TierValueMin.GetHashCode();
                if (this.TierValueMax != null)
                    hashCode = hashCode * 59 + this.TierValueMax.GetHashCode();
                if (this.AgreementLengthMin != null)
                    hashCode = hashCode * 59 + this.AgreementLengthMin.GetHashCode();
                if (this.AgreementLengthMax != null)
                    hashCode = hashCode * 59 + this.AgreementLengthMax.GetHashCode();
                if (this.AgreementPeriod != null)
                    hashCode = hashCode * 59 + this.AgreementPeriod.GetHashCode();
                if (this.OverdraftInterestChargingCoverage != null)
                    hashCode = hashCode * 59 + this.OverdraftInterestChargingCoverage.GetHashCode();
                if (this.BankGuaranteedIndicator != null)
                    hashCode = hashCode * 59 + this.BankGuaranteedIndicator.GetHashCode();
                if (this.OverdraftFeesCharges != null)
                    hashCode = hashCode * 59 + this.OverdraftFeesCharges.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
