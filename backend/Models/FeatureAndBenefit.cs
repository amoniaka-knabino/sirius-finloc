/* 
 * Получение публичной информации о банковских продуктах
 *
 * Содержит описываются API для Открытых банковских интерфейсов для получения публичной информации о банковских продуктах.
 *
 * OpenAPI spec version: 1.3.1
 * Contact: info@fintechru.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Информация об программах и преимуществах продукта или тарифа
    /// </summary>
    [DataContract]
        public partial class FeatureAndBenefit :  IEquatable<FeatureAndBenefit>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FeatureAndBenefit" /> class.
        /// </summary>
        /// <param name="featureAndBenefitGroup">Группа элементов, описывающих программы и преимущества.</param>
        /// <param name="featureAndBenefitItem">Характеристики, связанные с программами и преимуществами.</param>
        public FeatureAndBenefit(List<FeatureAndBenefitGroup> featureAndBenefitGroup = default(List<FeatureAndBenefitGroup>), List<FeatureAndBenefitItem> featureAndBenefitItem = default(List<FeatureAndBenefitItem>))
        {
            this.FeatureAndBenefitGroup = featureAndBenefitGroup;
            this.FeatureAndBenefitItem = featureAndBenefitItem;
        }
        
        /// <summary>
        /// Группа элементов, описывающих программы и преимущества
        /// </summary>
        /// <value>Группа элементов, описывающих программы и преимущества</value>
        [DataMember(Name="FeatureAndBenefitGroup", EmitDefaultValue=false)]
        public List<FeatureAndBenefitGroup> FeatureAndBenefitGroup { get; set; }

        /// <summary>
        /// Характеристики, связанные с программами и преимуществами
        /// </summary>
        /// <value>Характеристики, связанные с программами и преимуществами</value>
        [DataMember(Name="FeatureAndBenefitItem", EmitDefaultValue=false)]
        public List<FeatureAndBenefitItem> FeatureAndBenefitItem { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FeatureAndBenefit {\n");
            sb.Append("  FeatureAndBenefitGroup: ").Append(FeatureAndBenefitGroup).Append("\n");
            sb.Append("  FeatureAndBenefitItem: ").Append(FeatureAndBenefitItem).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FeatureAndBenefit);
        }

        /// <summary>
        /// Returns true if FeatureAndBenefit instances are equal
        /// </summary>
        /// <param name="input">Instance of FeatureAndBenefit to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FeatureAndBenefit input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FeatureAndBenefitGroup == input.FeatureAndBenefitGroup ||
                    this.FeatureAndBenefitGroup != null &&
                    input.FeatureAndBenefitGroup != null &&
                    this.FeatureAndBenefitGroup.SequenceEqual(input.FeatureAndBenefitGroup)
                ) && 
                (
                    this.FeatureAndBenefitItem == input.FeatureAndBenefitItem ||
                    this.FeatureAndBenefitItem != null &&
                    input.FeatureAndBenefitItem != null &&
                    this.FeatureAndBenefitItem.SequenceEqual(input.FeatureAndBenefitItem)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FeatureAndBenefitGroup != null)
                    hashCode = hashCode * 59 + this.FeatureAndBenefitGroup.GetHashCode();
                if (this.FeatureAndBenefitItem != null)
                    hashCode = hashCode * 59 + this.FeatureAndBenefitItem.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
