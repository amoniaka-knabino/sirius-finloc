/* 
 * Получение публичной информации о банковских продуктах
 *
 * Содержит описываются API для Открытых банковских интерфейсов для получения публичной информации о банковских продуктах.
 *
 * OpenAPI spec version: 1.3.1
 * Contact: info@fintechru.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Общая информация о подразделении кредитной организации, его условиях работы, предоставляемых услугах и их характеристиках, а также определении его точного местоположения.
    /// </summary>
    [DataContract]
        public partial class Branch :  IEquatable<Branch>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Branch" /> class.
        /// </summary>
        /// <param name="branchId">Уникальный и неизменный идентификатор, используемый для идентификации ресурса branches (required).</param>
        /// <param name="name">Наименование отделения.</param>
        /// <param name="wifi">Наличие Wi-Fi.</param>
        /// <param name="equeue">Наличие электронной очереди.</param>
        /// <param name="accessibilities">accessibilities.</param>
        /// <param name="services">services.</param>
        /// <param name="information">information.</param>
        /// <param name="address">address (required).</param>
        public Branch(string branchId = default(string), string name = default(string), bool? wifi = default(bool?), bool? equeue = default(bool?), Accessibilities accessibilities = default(Accessibilities), BranchServices services = default(BranchServices), Information information = default(Information), PostalAddressAndLocation address = default(PostalAddressAndLocation))
        {
            // to ensure "branchId" is required (not null)
            if (branchId == null)
            {
                throw new InvalidDataException("branchId is a required property for Branch and cannot be null");
            }
            else
            {
                this.BranchId = branchId;
            }
            // to ensure "address" is required (not null)
            if (address == null)
            {
                throw new InvalidDataException("address is a required property for Branch and cannot be null");
            }
            else
            {
                this.Address = address;
            }
            this.Name = name;
            this.Wifi = wifi;
            this.Equeue = equeue;
            this.Accessibilities = accessibilities;
            this.Services = services;
            this.Information = information;
        }
        
        /// <summary>
        /// Уникальный и неизменный идентификатор, используемый для идентификации ресурса branches
        /// </summary>
        /// <value>Уникальный и неизменный идентификатор, используемый для идентификации ресурса branches</value>
        [DataMember(Name="branchId", EmitDefaultValue=false)]
        public string BranchId { get; set; }

        /// <summary>
        /// Наименование отделения
        /// </summary>
        /// <value>Наименование отделения</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Наличие Wi-Fi
        /// </summary>
        /// <value>Наличие Wi-Fi</value>
        [DataMember(Name="wifi", EmitDefaultValue=false)]
        public bool? Wifi { get; set; }

        /// <summary>
        /// Наличие электронной очереди
        /// </summary>
        /// <value>Наличие электронной очереди</value>
        [DataMember(Name="equeue", EmitDefaultValue=false)]
        public bool? Equeue { get; set; }

        /// <summary>
        /// Gets or Sets Accessibilities
        /// </summary>
        [DataMember(Name="Accessibilities", EmitDefaultValue=false)]
        public Accessibilities Accessibilities { get; set; }

        /// <summary>
        /// Gets or Sets Services
        /// </summary>
        [DataMember(Name="Services", EmitDefaultValue=false)]
        public BranchServices Services { get; set; }

        /// <summary>
        /// Gets or Sets Information
        /// </summary>
        [DataMember(Name="Information", EmitDefaultValue=false)]
        public Information Information { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="Address", EmitDefaultValue=false)]
        public PostalAddressAndLocation Address { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Branch {\n");
            sb.Append("  BranchId: ").Append(BranchId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Wifi: ").Append(Wifi).Append("\n");
            sb.Append("  Equeue: ").Append(Equeue).Append("\n");
            sb.Append("  Accessibilities: ").Append(Accessibilities).Append("\n");
            sb.Append("  Services: ").Append(Services).Append("\n");
            sb.Append("  Information: ").Append(Information).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Branch);
        }

        /// <summary>
        /// Returns true if Branch instances are equal
        /// </summary>
        /// <param name="input">Instance of Branch to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Branch input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BranchId == input.BranchId ||
                    (this.BranchId != null &&
                    this.BranchId.Equals(input.BranchId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Wifi == input.Wifi ||
                    (this.Wifi != null &&
                    this.Wifi.Equals(input.Wifi))
                ) && 
                (
                    this.Equeue == input.Equeue ||
                    (this.Equeue != null &&
                    this.Equeue.Equals(input.Equeue))
                ) && 
                (
                    this.Accessibilities == input.Accessibilities ||
                    (this.Accessibilities != null &&
                    this.Accessibilities.Equals(input.Accessibilities))
                ) && 
                (
                    this.Services == input.Services ||
                    (this.Services != null &&
                    this.Services.Equals(input.Services))
                ) && 
                (
                    this.Information == input.Information ||
                    (this.Information != null &&
                    this.Information.Equals(input.Information))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BranchId != null)
                    hashCode = hashCode * 59 + this.BranchId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Wifi != null)
                    hashCode = hashCode * 59 + this.Wifi.GetHashCode();
                if (this.Equeue != null)
                    hashCode = hashCode * 59 + this.Equeue.GetHashCode();
                if (this.Accessibilities != null)
                    hashCode = hashCode * 59 + this.Accessibilities.GetHashCode();
                if (this.Services != null)
                    hashCode = hashCode * 59 + this.Services.GetHashCode();
                if (this.Information != null)
                    hashCode = hashCode * 59 + this.Information.GetHashCode();
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
