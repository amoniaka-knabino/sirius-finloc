/* 
 * Получение публичной информации о банковских продуктах
 *
 * Содержит описываются API для Открытых банковских интерфейсов для получения публичной информации о банковских продуктах.
 *
 * OpenAPI spec version: 1.3.1
 * Contact: info@fintechru.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Подробная информация о процентных ставках по овердрафту
    /// </summary>
    [DataContract]
        public partial class OverdraftTierBandSet :  IEquatable<OverdraftTierBandSet>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OverdraftTierBandSet" /> class.
        /// </summary>
        /// <param name="identification">Уникальный идентификатор уровня процентных ставок для овердрафта.</param>
        /// <param name="tierBandMethod">tierBandMethod (required).</param>
        /// <param name="overdraftType">overdraftType.</param>
        /// <param name="authorisedIndicator">Необходимость авторизации | true - требуется авторизовать овердрафт; \\n | false - не требуется авторизация..</param>
        /// <param name="bufferAmount">bufferAmount.</param>
        /// <param name="comments">comments.</param>
        /// <param name="overdraftTierBand">Подробная информация об уровнях процентной ставки по овердрафту (required).</param>
        /// <param name="overdraftFeesCharges">Детали комиссии и сборов за овердрафт.</param>
        public OverdraftTierBandSet(string identification = default(string), TierBandMethod tierBandMethod = default(TierBandMethod), OverdraftType overdraftType = default(OverdraftType), bool? authorisedIndicator = default(bool?), string bufferAmount = default(string), Comments comments = default(Comments), List<OverdraftTierBand> overdraftTierBand = default(List<OverdraftTierBand>), List<OverdraftFeesCharges> overdraftFeesCharges = default(List<OverdraftFeesCharges>))
        {
            // to ensure "tierBandMethod" is required (not null)
            if (tierBandMethod == null)
            {
                throw new InvalidDataException("tierBandMethod is a required property for OverdraftTierBandSet and cannot be null");
            }
            else
            {
                this.TierBandMethod = tierBandMethod;
            }
            // to ensure "overdraftTierBand" is required (not null)
            if (overdraftTierBand == null)
            {
                throw new InvalidDataException("overdraftTierBand is a required property for OverdraftTierBandSet and cannot be null");
            }
            else
            {
                this.OverdraftTierBand = overdraftTierBand;
            }
            this.Identification = identification;
            this.OverdraftType = overdraftType;
            this.AuthorisedIndicator = authorisedIndicator;
            this.BufferAmount = bufferAmount;
            this.Comments = comments;
            this.OverdraftFeesCharges = overdraftFeesCharges;
        }
        
        /// <summary>
        /// Уникальный идентификатор уровня процентных ставок для овердрафта
        /// </summary>
        /// <value>Уникальный идентификатор уровня процентных ставок для овердрафта</value>
        [DataMember(Name="identification", EmitDefaultValue=false)]
        public string Identification { get; set; }

        /// <summary>
        /// Gets or Sets TierBandMethod
        /// </summary>
        [DataMember(Name="tierBandMethod", EmitDefaultValue=false)]
        public TierBandMethod TierBandMethod { get; set; }

        /// <summary>
        /// Gets or Sets OverdraftType
        /// </summary>
        [DataMember(Name="overdraftType", EmitDefaultValue=false)]
        public OverdraftType OverdraftType { get; set; }

        /// <summary>
        /// Необходимость авторизации | true - требуется авторизовать овердрафт; \\n | false - не требуется авторизация.
        /// </summary>
        /// <value>Необходимость авторизации | true - требуется авторизовать овердрафт; \\n | false - не требуется авторизация.</value>
        [DataMember(Name="authorisedIndicator", EmitDefaultValue=false)]
        public bool? AuthorisedIndicator { get; set; }

        /// <summary>
        /// Gets or Sets BufferAmount
        /// </summary>
        [DataMember(Name="bufferAmount", EmitDefaultValue=false)]
        public string BufferAmount { get; set; }

        /// <summary>
        /// Gets or Sets Comments
        /// </summary>
        [DataMember(Name="comments", EmitDefaultValue=false)]
        public Comments Comments { get; set; }

        /// <summary>
        /// Подробная информация об уровнях процентной ставки по овердрафту
        /// </summary>
        /// <value>Подробная информация об уровнях процентной ставки по овердрафту</value>
        [DataMember(Name="OverdraftTierBand", EmitDefaultValue=false)]
        public List<OverdraftTierBand> OverdraftTierBand { get; set; }

        /// <summary>
        /// Детали комиссии и сборов за овердрафт
        /// </summary>
        /// <value>Детали комиссии и сборов за овердрафт</value>
        [DataMember(Name="OverdraftFeesCharges", EmitDefaultValue=false)]
        public List<OverdraftFeesCharges> OverdraftFeesCharges { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OverdraftTierBandSet {\n");
            sb.Append("  Identification: ").Append(Identification).Append("\n");
            sb.Append("  TierBandMethod: ").Append(TierBandMethod).Append("\n");
            sb.Append("  OverdraftType: ").Append(OverdraftType).Append("\n");
            sb.Append("  AuthorisedIndicator: ").Append(AuthorisedIndicator).Append("\n");
            sb.Append("  BufferAmount: ").Append(BufferAmount).Append("\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("  OverdraftTierBand: ").Append(OverdraftTierBand).Append("\n");
            sb.Append("  OverdraftFeesCharges: ").Append(OverdraftFeesCharges).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OverdraftTierBandSet);
        }

        /// <summary>
        /// Returns true if OverdraftTierBandSet instances are equal
        /// </summary>
        /// <param name="input">Instance of OverdraftTierBandSet to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OverdraftTierBandSet input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Identification == input.Identification ||
                    (this.Identification != null &&
                    this.Identification.Equals(input.Identification))
                ) && 
                (
                    this.TierBandMethod == input.TierBandMethod ||
                    (this.TierBandMethod != null &&
                    this.TierBandMethod.Equals(input.TierBandMethod))
                ) && 
                (
                    this.OverdraftType == input.OverdraftType ||
                    (this.OverdraftType != null &&
                    this.OverdraftType.Equals(input.OverdraftType))
                ) && 
                (
                    this.AuthorisedIndicator == input.AuthorisedIndicator ||
                    (this.AuthorisedIndicator != null &&
                    this.AuthorisedIndicator.Equals(input.AuthorisedIndicator))
                ) && 
                (
                    this.BufferAmount == input.BufferAmount ||
                    (this.BufferAmount != null &&
                    this.BufferAmount.Equals(input.BufferAmount))
                ) && 
                (
                    this.Comments == input.Comments ||
                    (this.Comments != null &&
                    this.Comments.Equals(input.Comments))
                ) && 
                (
                    this.OverdraftTierBand == input.OverdraftTierBand ||
                    this.OverdraftTierBand != null &&
                    input.OverdraftTierBand != null &&
                    this.OverdraftTierBand.SequenceEqual(input.OverdraftTierBand)
                ) && 
                (
                    this.OverdraftFeesCharges == input.OverdraftFeesCharges ||
                    this.OverdraftFeesCharges != null &&
                    input.OverdraftFeesCharges != null &&
                    this.OverdraftFeesCharges.SequenceEqual(input.OverdraftFeesCharges)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Identification != null)
                    hashCode = hashCode * 59 + this.Identification.GetHashCode();
                if (this.TierBandMethod != null)
                    hashCode = hashCode * 59 + this.TierBandMethod.GetHashCode();
                if (this.OverdraftType != null)
                    hashCode = hashCode * 59 + this.OverdraftType.GetHashCode();
                if (this.AuthorisedIndicator != null)
                    hashCode = hashCode * 59 + this.AuthorisedIndicator.GetHashCode();
                if (this.BufferAmount != null)
                    hashCode = hashCode * 59 + this.BufferAmount.GetHashCode();
                if (this.Comments != null)
                    hashCode = hashCode * 59 + this.Comments.GetHashCode();
                if (this.OverdraftTierBand != null)
                    hashCode = hashCode * 59 + this.OverdraftTierBand.GetHashCode();
                if (this.OverdraftFeesCharges != null)
                    hashCode = hashCode * 59 + this.OverdraftFeesCharges.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
